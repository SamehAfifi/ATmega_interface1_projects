
keypad_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000003d4  00000468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800070  00800070  00000478  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000943  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003df  00000000  00000000  000015f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b0  00000000  00000000  000019d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00002184  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001c9  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026b  00000000  00000000  00002469  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bd 00 	call	0x17a	; 0x17a <main>
  8a:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keypad_init>:
	'5','6','7','8',
	'9','A','B','C',
	'D','E','F','G',
};
void keypad_init(){
	mykeypadport
  92:	8f e0       	ldi	r24, 0x0F	; 15
  94:	81 bb       	out	0x11, r24	; 17
	pullup
  96:	80 ef       	ldi	r24, 0xF0	; 240
  98:	82 bb       	out	0x12, r24	; 18
}
  9a:	08 95       	ret

0000009c <press>:
int8_t press(int8_t i){
	if(!k5 )return keypad_matrix[0+i*4];
  9c:	90 b3       	in	r25, 0x10	; 16
  9e:	92 95       	swap	r25
  a0:	9f 70       	andi	r25, 0x0F	; 15
  a2:	90 fd       	sbrc	r25, 0
  a4:	0c c0       	rjmp	.+24     	; 0xbe <press+0x22>
  a6:	e8 2f       	mov	r30, r24
  a8:	ff 27       	eor	r31, r31
  aa:	e7 fd       	sbrc	r30, 7
  ac:	f0 95       	com	r31
  ae:	ee 0f       	add	r30, r30
  b0:	ff 1f       	adc	r31, r31
  b2:	ee 0f       	add	r30, r30
  b4:	ff 1f       	adc	r31, r31
  b6:	e0 5a       	subi	r30, 0xA0	; 160
  b8:	ff 4f       	sbci	r31, 0xFF	; 255
  ba:	80 81       	ld	r24, Z
  bc:	08 95       	ret
	if(!k6 )return keypad_matrix[1+i*4];
  be:	90 b3       	in	r25, 0x10	; 16
  c0:	92 95       	swap	r25
  c2:	96 95       	lsr	r25
  c4:	97 70       	andi	r25, 0x07	; 7
  c6:	90 fd       	sbrc	r25, 0
  c8:	0c c0       	rjmp	.+24     	; 0xe2 <press+0x46>
  ca:	e8 2f       	mov	r30, r24
  cc:	ff 27       	eor	r31, r31
  ce:	e7 fd       	sbrc	r30, 7
  d0:	f0 95       	com	r31
  d2:	ee 0f       	add	r30, r30
  d4:	ff 1f       	adc	r31, r31
  d6:	ee 0f       	add	r30, r30
  d8:	ff 1f       	adc	r31, r31
  da:	e0 5a       	subi	r30, 0xA0	; 160
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	81 81       	ldd	r24, Z+1	; 0x01
  e0:	08 95       	ret
	if(!k7 )return keypad_matrix[2+i*4];
  e2:	90 b3       	in	r25, 0x10	; 16
  e4:	92 95       	swap	r25
  e6:	96 95       	lsr	r25
  e8:	96 95       	lsr	r25
  ea:	93 70       	andi	r25, 0x03	; 3
  ec:	90 fd       	sbrc	r25, 0
  ee:	0c c0       	rjmp	.+24     	; 0x108 <press+0x6c>
  f0:	e8 2f       	mov	r30, r24
  f2:	ff 27       	eor	r31, r31
  f4:	e7 fd       	sbrc	r30, 7
  f6:	f0 95       	com	r31
  f8:	ee 0f       	add	r30, r30
  fa:	ff 1f       	adc	r31, r31
  fc:	ee 0f       	add	r30, r30
  fe:	ff 1f       	adc	r31, r31
 100:	e0 5a       	subi	r30, 0xA0	; 160
 102:	ff 4f       	sbci	r31, 0xFF	; 255
 104:	82 81       	ldd	r24, Z+2	; 0x02
 106:	08 95       	ret
	if(!k8 )return keypad_matrix[3+i*4];
 108:	87 99       	sbic	0x10, 7	; 16
 10a:	0c c0       	rjmp	.+24     	; 0x124 <press+0x88>
 10c:	e8 2f       	mov	r30, r24
 10e:	ff 27       	eor	r31, r31
 110:	e7 fd       	sbrc	r30, 7
 112:	f0 95       	com	r31
 114:	ee 0f       	add	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	ee 0f       	add	r30, r30
 11a:	ff 1f       	adc	r31, r31
 11c:	e0 5a       	subi	r30, 0xA0	; 160
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	83 81       	ldd	r24, Z+3	; 0x03
 122:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	8f e1       	ldi	r24, 0x1F	; 31
 126:	9e e4       	ldi	r25, 0x4E	; 78
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <press+0x8c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <press+0x92>
 12e:	00 00       	nop
	_delay_ms(10);
	return -1;
 130:	8f ef       	ldi	r24, 0xFF	; 255
}
 132:	08 95       	ret

00000134 <keypad_click>:
int8_t keypad_click(){
	int8_t k;
	k1(0);k2(1);k3(1);k4(1);	k = press(0); if(k != -1)	return k;
 134:	90 98       	cbi	0x12, 0	; 18
 136:	91 9a       	sbi	0x12, 1	; 18
 138:	92 9a       	sbi	0x12, 2	; 18
 13a:	93 9a       	sbi	0x12, 3	; 18
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 4e 00 	call	0x9c	; 0x9c <press>
 142:	8f 3f       	cpi	r24, 0xFF	; 255
 144:	c9 f4       	brne	.+50     	; 0x178 <keypad_click+0x44>
	k1(1);k2(0);k3(1);k4(1);	k = press(1); if(k != -1)	return k;
 146:	90 9a       	sbi	0x12, 0	; 18
 148:	91 98       	cbi	0x12, 1	; 18
 14a:	92 9a       	sbi	0x12, 2	; 18
 14c:	93 9a       	sbi	0x12, 3	; 18
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 4e 00 	call	0x9c	; 0x9c <press>
 154:	8f 3f       	cpi	r24, 0xFF	; 255
 156:	81 f4       	brne	.+32     	; 0x178 <keypad_click+0x44>
	k1(1);k2(1);k3(0);k4(1);	k = press(2); if(k != -1)	return k;
 158:	90 9a       	sbi	0x12, 0	; 18
 15a:	91 9a       	sbi	0x12, 1	; 18
 15c:	92 98       	cbi	0x12, 2	; 18
 15e:	93 9a       	sbi	0x12, 3	; 18
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	0e 94 4e 00 	call	0x9c	; 0x9c <press>
 166:	8f 3f       	cpi	r24, 0xFF	; 255
 168:	39 f4       	brne	.+14     	; 0x178 <keypad_click+0x44>
	k1(1);k2(1);k3(1);k4(0);	k = press(3); if(k != -1)	return k;
 16a:	90 9a       	sbi	0x12, 0	; 18
 16c:	91 9a       	sbi	0x12, 1	; 18
 16e:	92 9a       	sbi	0x12, 2	; 18
 170:	93 98       	cbi	0x12, 3	; 18
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	0e 94 4e 00 	call	0x9c	; 0x9c <press>
	return -1;
 178:	08 95       	ret

0000017a <main>:
#include "keypad.h"
#include "lcd.h"
#include "std_macros.h"
int main(void)
{
	keypad_init();
 17a:	0e 94 49 00 	call	0x92	; 0x92 <keypad_init>
	lcd_init();
 17e:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_init>
    while(1)
    {
		
		if (keypad_click() != -1) 
 182:	0e 94 9a 00 	call	0x134	; 0x134 <keypad_click>
 186:	8f 3f       	cpi	r24, 0xFF	; 255
 188:	e1 f3       	breq	.-8      	; 0x182 <main+0x8>
		{
			lcd_write_cmd(0x01); //clear
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	0e 94 b0 01 	call	0x360	; 0x360 <lcd_write_cmd>
			lcd_write_cmd(0xc4); // 2nd_line+4
 190:	84 ec       	ldi	r24, 0xC4	; 196
 192:	0e 94 b0 01 	call	0x360	; 0x360 <lcd_write_cmd>
			lcd_write_char(keypad_click());
 196:	0e 94 9a 00 	call	0x134	; 0x134 <keypad_click>
 19a:	0e 94 90 01 	call	0x320	; 0x320 <lcd_write_char>
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	91 ee       	ldi	r25, 0xE1	; 225
 1a2:	a4 e0       	ldi	r26, 0x04	; 4
 1a4:	81 50       	subi	r24, 0x01	; 1
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	a0 40       	sbci	r26, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x2a>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x34>
 1ae:	00 00       	nop
 1b0:	e8 cf       	rjmp	.-48     	; 0x182 <main+0x8>

000001b2 <IntToString>:
void lcd_write_number(uint16_t data){
	IntToString(data,txt);
	lcd_write_txt(txt);
}

void IntToString(uint16_t number, uint8_t *txt){
 1b2:	fb 01       	movw	r30, r22
	
	if(number < 10){
 1b4:	8a 30       	cpi	r24, 0x0A	; 10
 1b6:	91 05       	cpc	r25, r1
 1b8:	40 f4       	brcc	.+16     	; 0x1ca <IntToString+0x18>
		txt[0] = number % 10 + 48;
 1ba:	6a e0       	ldi	r22, 0x0A	; 10
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__udivmodhi4>
 1c2:	80 5d       	subi	r24, 0xD0	; 208
 1c4:	80 83       	st	Z, r24
		txt[1] = '\0';
 1c6:	11 82       	std	Z+1, r1	; 0x01
 1c8:	08 95       	ret
	}
	else if(number < 100){
 1ca:	84 36       	cpi	r24, 0x64	; 100
 1cc:	91 05       	cpc	r25, r1
 1ce:	50 f4       	brcc	.+20     	; 0x1e4 <IntToString+0x32>
		txt[0] = number / 10 + 48;
 1d0:	6a e0       	ldi	r22, 0x0A	; 10
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__udivmodhi4>
 1d8:	60 5d       	subi	r22, 0xD0	; 208
 1da:	60 83       	st	Z, r22
		txt[1] = number % 10 + 48;
 1dc:	80 5d       	subi	r24, 0xD0	; 208
 1de:	81 83       	std	Z+1, r24	; 0x01
		txt[2] = '\0';
 1e0:	12 82       	std	Z+2, r1	; 0x02
 1e2:	08 95       	ret
	}
	else if(number < 1000){
 1e4:	23 e0       	ldi	r18, 0x03	; 3
 1e6:	88 3e       	cpi	r24, 0xE8	; 232
 1e8:	92 07       	cpc	r25, r18
 1ea:	80 f4       	brcc	.+32     	; 0x20c <IntToString+0x5a>
		txt[0] = number / 100 + 48;
 1ec:	64 e6       	ldi	r22, 0x64	; 100
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__udivmodhi4>
 1f4:	60 5d       	subi	r22, 0xD0	; 208
 1f6:	60 83       	st	Z, r22
		number = number % 100 ;
		txt[1] = number / 10 + 48;
 1f8:	6a e0       	ldi	r22, 0x0A	; 10
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__udivmodhi4>
 200:	60 5d       	subi	r22, 0xD0	; 208
 202:	61 83       	std	Z+1, r22	; 0x01
		txt[2] = number % 10 + 48;
 204:	80 5d       	subi	r24, 0xD0	; 208
 206:	82 83       	std	Z+2, r24	; 0x02
		txt[3] = '\0';
 208:	13 82       	std	Z+3, r1	; 0x03
 20a:	08 95       	ret
	}
	else  if(number < 10000){
 20c:	27 e2       	ldi	r18, 0x27	; 39
 20e:	80 31       	cpi	r24, 0x10	; 16
 210:	92 07       	cpc	r25, r18
 212:	b0 f4       	brcc	.+44     	; 0x240 <IntToString+0x8e>
		txt[0] = number / 1000 + 48;
 214:	68 ee       	ldi	r22, 0xE8	; 232
 216:	73 e0       	ldi	r23, 0x03	; 3
 218:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__udivmodhi4>
 21c:	60 5d       	subi	r22, 0xD0	; 208
 21e:	60 83       	st	Z, r22
		number = number % 1000 ;
		txt[1] = number / 100 + 48;
 220:	64 e6       	ldi	r22, 0x64	; 100
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__udivmodhi4>
 228:	60 5d       	subi	r22, 0xD0	; 208
 22a:	61 83       	std	Z+1, r22	; 0x01
		number = number % 100 ;
		txt[2] = number / 10 + 48;
 22c:	6a e0       	ldi	r22, 0x0A	; 10
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__udivmodhi4>
 234:	60 5d       	subi	r22, 0xD0	; 208
 236:	62 83       	std	Z+2, r22	; 0x02
		txt[3] = number % 10 + 48;
 238:	80 5d       	subi	r24, 0xD0	; 208
 23a:	83 83       	std	Z+3, r24	; 0x03
		txt[4] = '\0';
 23c:	14 82       	std	Z+4, r1	; 0x04
 23e:	08 95       	ret
	}
	else  if(number < 100000){
		txt[0] = number / 10000 + 48;
 240:	60 e1       	ldi	r22, 0x10	; 16
 242:	77 e2       	ldi	r23, 0x27	; 39
 244:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__udivmodhi4>
 248:	60 5d       	subi	r22, 0xD0	; 208
 24a:	60 83       	st	Z, r22
		number = number % 10000 ;
		txt[1] = number / 1000 + 48;
 24c:	68 ee       	ldi	r22, 0xE8	; 232
 24e:	73 e0       	ldi	r23, 0x03	; 3
 250:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__udivmodhi4>
 254:	60 5d       	subi	r22, 0xD0	; 208
 256:	61 83       	std	Z+1, r22	; 0x01
		number = number % 1000 ;
		txt[2] = number / 100 + 48;
 258:	64 e6       	ldi	r22, 0x64	; 100
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__udivmodhi4>
 260:	60 5d       	subi	r22, 0xD0	; 208
 262:	62 83       	std	Z+2, r22	; 0x02
		number = number % 100 ;
		txt[3] = number / 10 + 48;
 264:	6a e0       	ldi	r22, 0x0A	; 10
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__udivmodhi4>
 26c:	60 5d       	subi	r22, 0xD0	; 208
 26e:	63 83       	std	Z+3, r22	; 0x03
		txt[4] = number % 10 + 48;
 270:	80 5d       	subi	r24, 0xD0	; 208
 272:	84 83       	std	Z+4, r24	; 0x04
		txt[5] = '\0';
 274:	15 82       	std	Z+5, r1	; 0x05
 276:	08 95       	ret

00000278 <lcd_send_pulse_for_update_data_or_cmd>:
	}
}

void lcd_send_pulse_for_update_data_or_cmd(){
	EN(1);
 278:	c3 9a       	sbi	0x18, 3	; 24
 27a:	8f ec       	ldi	r24, 0xCF	; 207
 27c:	97 e0       	ldi	r25, 0x07	; 7
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <lcd_send_pulse_for_update_data_or_cmd+0x6>
 282:	00 c0       	rjmp	.+0      	; 0x284 <lcd_send_pulse_for_update_data_or_cmd+0xc>
 284:	00 00       	nop
	_delay_ms(1);
	EN(0);
 286:	c3 98       	cbi	0x18, 3	; 24
 288:	8f ec       	ldi	r24, 0xCF	; 207
 28a:	97 e0       	ldi	r25, 0x07	; 7
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <lcd_send_pulse_for_update_data_or_cmd+0x14>
 290:	00 c0       	rjmp	.+0      	; 0x292 <lcd_send_pulse_for_update_data_or_cmd+0x1a>
 292:	00 00       	nop
	_delay_ms(1);
}
 294:	08 95       	ret

00000296 <lcd_write>:
	lcd_write_cmd(0x06);  // increment cursor right
	lcd_write_cmd(0x80);  // set courser at the beginning of the first line
	_delay_ms(20);
}

void lcd_write(uint8_t cmd){
 296:	cf 93       	push	r28
 298:	c8 2f       	mov	r28, r24
	// read first 4 bit
	D7(READBIT(cmd,7)); 
 29a:	88 23       	and	r24, r24
 29c:	14 f0       	brlt	.+4      	; 0x2a2 <lcd_write+0xc>
 29e:	df 98       	cbi	0x1b, 7	; 27
 2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <lcd_write+0xe>
 2a2:	df 9a       	sbi	0x1b, 7	; 27
	D6(READBIT(cmd,6));
 2a4:	8c 2f       	mov	r24, r28
 2a6:	82 95       	swap	r24
 2a8:	86 95       	lsr	r24
 2aa:	86 95       	lsr	r24
 2ac:	83 70       	andi	r24, 0x03	; 3
 2ae:	80 fd       	sbrc	r24, 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <lcd_write+0x20>
 2b2:	de 98       	cbi	0x1b, 6	; 27
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <lcd_write+0x22>
 2b6:	de 9a       	sbi	0x1b, 6	; 27
	D5(READBIT(cmd,5));
 2b8:	8c 2f       	mov	r24, r28
 2ba:	82 95       	swap	r24
 2bc:	86 95       	lsr	r24
 2be:	87 70       	andi	r24, 0x07	; 7
 2c0:	80 fd       	sbrc	r24, 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <lcd_write+0x32>
 2c4:	dd 98       	cbi	0x1b, 5	; 27
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <lcd_write+0x34>
 2c8:	dd 9a       	sbi	0x1b, 5	; 27
	D4(READBIT(cmd,4));
 2ca:	8c 2f       	mov	r24, r28
 2cc:	82 95       	swap	r24
 2ce:	8f 70       	andi	r24, 0x0F	; 15
 2d0:	80 fd       	sbrc	r24, 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <lcd_write+0x42>
 2d4:	dc 98       	cbi	0x1b, 4	; 27
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <lcd_write+0x44>
 2d8:	dc 9a       	sbi	0x1b, 4	; 27

	lcd_send_pulse_for_update_data_or_cmd();
 2da:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_send_pulse_for_update_data_or_cmd>

	// read second 4 bit
	D7(READBIT(cmd,3));
 2de:	8c 2f       	mov	r24, r28
 2e0:	86 95       	lsr	r24
 2e2:	86 95       	lsr	r24
 2e4:	86 95       	lsr	r24
 2e6:	80 fd       	sbrc	r24, 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <lcd_write+0x58>
 2ea:	df 98       	cbi	0x1b, 7	; 27
 2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <lcd_write+0x5a>
 2ee:	df 9a       	sbi	0x1b, 7	; 27
	D6(READBIT(cmd,2));
 2f0:	8c 2f       	mov	r24, r28
 2f2:	86 95       	lsr	r24
 2f4:	86 95       	lsr	r24
 2f6:	80 fd       	sbrc	r24, 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <lcd_write+0x68>
 2fa:	de 98       	cbi	0x1b, 6	; 27
 2fc:	01 c0       	rjmp	.+2      	; 0x300 <lcd_write+0x6a>
 2fe:	de 9a       	sbi	0x1b, 6	; 27
	D5(READBIT(cmd,1));
 300:	8c 2f       	mov	r24, r28
 302:	86 95       	lsr	r24
 304:	80 fd       	sbrc	r24, 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <lcd_write+0x76>
 308:	dd 98       	cbi	0x1b, 5	; 27
 30a:	01 c0       	rjmp	.+2      	; 0x30e <lcd_write+0x78>
 30c:	dd 9a       	sbi	0x1b, 5	; 27
	D4(READBIT(cmd,0));
 30e:	c0 fd       	sbrc	r28, 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <lcd_write+0x80>
 312:	dc 98       	cbi	0x1b, 4	; 27
 314:	01 c0       	rjmp	.+2      	; 0x318 <lcd_write+0x82>
 316:	dc 9a       	sbi	0x1b, 4	; 27

	lcd_send_pulse_for_update_data_or_cmd();
 318:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_send_pulse_for_update_data_or_cmd>
}
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <lcd_write_char>:
	RS(0); // Rs = 0
	lcd_write(cmd);
}

void lcd_write_char(uint8_t cmd){
	RS(1); // Rs = 1
 320:	c1 9a       	sbi	0x18, 1	; 24
	lcd_write(cmd);
 322:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_write>
}
 326:	08 95       	ret

00000328 <lcd_write_txt>:


void lcd_write_txt(uint8_t *x){
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	ec 01       	movw	r28, r24
	for(int i = 0; x[i] != '\0'; i++)
 32e:	88 81       	ld	r24, Y
 330:	88 23       	and	r24, r24
 332:	31 f0       	breq	.+12     	; 0x340 <lcd_write_txt+0x18>
	RS(1); // Rs = 1
	lcd_write(cmd);
}


void lcd_write_txt(uint8_t *x){
 334:	21 96       	adiw	r28, 0x01	; 1
	for(int i = 0; x[i] != '\0'; i++)
		lcd_write_char(x[i]);
 336:	0e 94 90 01 	call	0x320	; 0x320 <lcd_write_char>
	lcd_write(cmd);
}


void lcd_write_txt(uint8_t *x){
	for(int i = 0; x[i] != '\0'; i++)
 33a:	89 91       	ld	r24, Y+
 33c:	88 23       	and	r24, r24
 33e:	d9 f7       	brne	.-10     	; 0x336 <lcd_write_txt+0xe>
		lcd_write_char(x[i]);
}
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <lcd_write_number>:

void lcd_write_number(uint16_t data){
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
	IntToString(data,txt);
 34a:	c0 e7       	ldi	r28, 0x70	; 112
 34c:	d0 e0       	ldi	r29, 0x00	; 0
 34e:	be 01       	movw	r22, r28
 350:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <IntToString>
	lcd_write_txt(txt);
 354:	ce 01       	movw	r24, r28
 356:	0e 94 94 01 	call	0x328	; 0x328 <lcd_write_txt>
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <lcd_write_cmd>:
	lcd_send_pulse_for_update_data_or_cmd();
}


void lcd_write_cmd(uint8_t cmd){
	RS(0); // Rs = 0
 360:	c1 98       	cbi	0x18, 1	; 24
	lcd_write(cmd);
 362:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_write>
}
 366:	08 95       	ret

00000368 <lcd_init>:

#include "lcd.h"
uint8_t txt[5];

void lcd_init(){
	INIT_PORT;
 368:	8a b3       	in	r24, 0x1a	; 26
 36a:	80 6f       	ori	r24, 0xF0	; 240
 36c:	8a bb       	out	0x1a, r24	; 26
 36e:	87 b3       	in	r24, 0x17	; 23
 370:	8e 60       	ori	r24, 0x0E	; 14
 372:	87 bb       	out	0x17, r24	; 23
	Rw(0);
 374:	c2 98       	cbi	0x18, 2	; 24
	lcd_write_cmd(0x2);
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	0e 94 b0 01 	call	0x360	; 0x360 <lcd_write_cmd>
	lcd_write_cmd(0x28);  // 4data line
 37c:	88 e2       	ldi	r24, 0x28	; 40
 37e:	0e 94 b0 01 	call	0x360	; 0x360 <lcd_write_cmd>
	lcd_write_cmd(0x01);
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 b0 01 	call	0x360	; 0x360 <lcd_write_cmd>
	lcd_write_cmd(0x0c);  // display on cursor off
 388:	8c e0       	ldi	r24, 0x0C	; 12
 38a:	0e 94 b0 01 	call	0x360	; 0x360 <lcd_write_cmd>
	lcd_write_cmd(0x06);  // increment cursor right
 38e:	86 e0       	ldi	r24, 0x06	; 6
 390:	0e 94 b0 01 	call	0x360	; 0x360 <lcd_write_cmd>
	lcd_write_cmd(0x80);  // set courser at the beginning of the first line
 394:	80 e8       	ldi	r24, 0x80	; 128
 396:	0e 94 b0 01 	call	0x360	; 0x360 <lcd_write_cmd>
 39a:	8f e3       	ldi	r24, 0x3F	; 63
 39c:	9c e9       	ldi	r25, 0x9C	; 156
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <lcd_init+0x36>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <lcd_init+0x3c>
 3a4:	00 00       	nop
	_delay_ms(20);
}
 3a6:	08 95       	ret

000003a8 <__udivmodhi4>:
 3a8:	aa 1b       	sub	r26, r26
 3aa:	bb 1b       	sub	r27, r27
 3ac:	51 e1       	ldi	r21, 0x11	; 17
 3ae:	07 c0       	rjmp	.+14     	; 0x3be <__udivmodhi4_ep>

000003b0 <__udivmodhi4_loop>:
 3b0:	aa 1f       	adc	r26, r26
 3b2:	bb 1f       	adc	r27, r27
 3b4:	a6 17       	cp	r26, r22
 3b6:	b7 07       	cpc	r27, r23
 3b8:	10 f0       	brcs	.+4      	; 0x3be <__udivmodhi4_ep>
 3ba:	a6 1b       	sub	r26, r22
 3bc:	b7 0b       	sbc	r27, r23

000003be <__udivmodhi4_ep>:
 3be:	88 1f       	adc	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	5a 95       	dec	r21
 3c4:	a9 f7       	brne	.-22     	; 0x3b0 <__udivmodhi4_loop>
 3c6:	80 95       	com	r24
 3c8:	90 95       	com	r25
 3ca:	bc 01       	movw	r22, r24
 3cc:	cd 01       	movw	r24, r26
 3ce:	08 95       	ret

000003d0 <_exit>:
 3d0:	f8 94       	cli

000003d2 <__stop_program>:
 3d2:	ff cf       	rjmp	.-2      	; 0x3d2 <__stop_program>
