
I2C_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000372  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000372  00000406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000406  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000b60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000086b  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002f7  00000000  00000000  000014ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000671  00000000  00000000  000017a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00001e14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000200  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000279  00000000  00000000  00002170  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 93 00 	call	0x126	; 0x126 <main>
  8a:	0c 94 b7 01 	jmp	0x36e	; 0x36e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_init>:
#define F_SCL 800000UL // SCL frequency
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)
void I2C_init(void)
{
	TWBR = (uint8_t)TWBR_val;
  92:	8d ef       	ldi	r24, 0xFD	; 253
  94:	80 b9       	out	0x00, r24	; 0
}
  96:	08 95       	ret

00000098 <I2C_start>:

uint8_t I2C_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
  98:	16 be       	out	0x36, r1	; 54
	// transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  9a:	94 ea       	ldi	r25, 0xA4	; 164
  9c:	96 bf       	out	0x36, r25	; 54
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
  9e:	06 b6       	in	r0, 0x36	; 54
  a0:	07 fe       	sbrs	r0, 7
  a2:	fd cf       	rjmp	.-6      	; 0x9e <I2C_start+0x6>
	
	// check if the start condition was successfully transmitted
if((TWSR & 0xF8) != TW_START){ return 1; }
  a4:	91 b1       	in	r25, 0x01	; 1
  a6:	98 7f       	andi	r25, 0xF8	; 248
  a8:	98 30       	cpi	r25, 0x08	; 8
  aa:	81 f4       	brne	.+32     	; 0xcc <I2C_start+0x34>

// load slave address into data register
TWDR = address<<1;
  ac:	88 0f       	add	r24, r24
  ae:	83 b9       	out	0x03, r24	; 3
// start transmission of address
TWCR = (1<<TWINT) | (1<<TWEN);
  b0:	84 e8       	ldi	r24, 0x84	; 132
  b2:	86 bf       	out	0x36, r24	; 54
// wait for end of transmission
while( !(TWCR & (1<<TWINT)) );
  b4:	06 b6       	in	r0, 0x36	; 54
  b6:	07 fe       	sbrs	r0, 7
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <I2C_start+0x1c>

// check if the device has acknowledged the READ / WRITE mode
uint8_t twst = TW_STATUS & 0xF8;
  ba:	91 b1       	in	r25, 0x01	; 1
  bc:	98 7f       	andi	r25, 0xF8	; 248
if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
  be:	98 31       	cpi	r25, 0x18	; 24
  c0:	39 f0       	breq	.+14     	; 0xd0 <I2C_start+0x38>
void I2C_init(void)
{
	TWBR = (uint8_t)TWBR_val;
}

uint8_t I2C_start(uint8_t address)
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 34       	cpi	r25, 0x40	; 64
  c6:	29 f4       	brne	.+10     	; 0xd2 <I2C_start+0x3a>
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
if((TWSR & 0xF8) != TW_START){ return 1; }
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	08 95       	ret

// check if the device has acknowledged the READ / WRITE mode
uint8_t twst = TW_STATUS & 0xF8;
if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

return 0;
  d0:	80 e0       	ldi	r24, 0x00	; 0
}
  d2:	08 95       	ret

000000d4 <I2C_write>:

uint8_t I2C_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
  d4:	83 b9       	out	0x03, r24	; 3
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
  d6:	84 e8       	ldi	r24, 0x84	; 132
  d8:	86 bf       	out	0x36, r24	; 54
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
  da:	06 b6       	in	r0, 0x36	; 54
  dc:	07 fe       	sbrs	r0, 7
  de:	fd cf       	rjmp	.-6      	; 0xda <I2C_write+0x6>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
  e0:	91 b1       	in	r25, 0x01	; 1
  e2:	98 7f       	andi	r25, 0xF8	; 248
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	98 32       	cpi	r25, 0x28	; 40
  e8:	09 f4       	brne	.+2      	; 0xec <I2C_write+0x18>
  ea:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
  ec:	08 95       	ret

000000ee <I2C_read_ack>:

uint8_t I2C_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
  ee:	84 ec       	ldi	r24, 0xC4	; 196
  f0:	86 bf       	out	0x36, r24	; 54
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
  f2:	06 b6       	in	r0, 0x36	; 54
  f4:	07 fe       	sbrs	r0, 7
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <I2C_read_ack+0x4>
	// return received data from TWDR
	return TWDR;
  f8:	83 b1       	in	r24, 0x03	; 3
}
  fa:	08 95       	ret

000000fc <I2C_stop>:

void I2C_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  fc:	84 e9       	ldi	r24, 0x94	; 148
  fe:	86 bf       	out	0x36, r24	; 54
}
 100:	08 95       	ret

00000102 <I2C_Slave_Init>:
void I2C_Slave_Init(unsigned char My_Add){
	TWAR = My_Add<<1;
 102:	88 0f       	add	r24, r24
 104:	82 b9       	out	0x02, r24	; 2
	TWCR = (1<<TWEA) | (1<<TWINT) | (1<<TWEN);
 106:	84 ec       	ldi	r24, 0xC4	; 196
 108:	86 bf       	out	0x36, r24	; 54
}
 10a:	08 95       	ret

0000010c <I2C_Slave_avialable>:

unsigned char I2C_Slave_avialable(){	
	TWCR |= (1<<TWINT) | (1<<TWEN);
 10c:	86 b7       	in	r24, 0x36	; 54
 10e:	84 68       	ori	r24, 0x84	; 132
 110:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
 112:	06 b6       	in	r0, 0x36	; 54
 114:	07 fe       	sbrs	r0, 7
 116:	fd cf       	rjmp	.-6      	; 0x112 <I2C_Slave_avialable+0x6>
	if((TWSR & 0xF8) == TW_SR_SLA_ACK) 
 118:	91 b1       	in	r25, 0x01	; 1
 11a:	98 7f       	andi	r25, 0xF8	; 248
	return 1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 36       	cpi	r25, 0x60	; 96
 120:	09 f0       	breq	.+2      	; 0x124 <I2C_Slave_avialable+0x18>
 122:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
 124:	08 95       	ret

00000126 <main>:
#include "lcd.h"
#include "std_macros.h"

int main(void)
{
	I2C_Slave_Init(0x50);
 126:	80 e5       	ldi	r24, 0x50	; 80
 128:	0e 94 81 00 	call	0x102	; 0x102 <I2C_Slave_Init>
	lcd_init();
 12c:	0e 94 83 01 	call	0x306	; 0x306 <lcd_init>
    while(1)
    {
		if (I2C_Slave_avialable())
 130:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_Slave_avialable>
 134:	88 23       	and	r24, r24
 136:	e1 f3       	breq	.-8      	; 0x130 <main+0xa>
		{
			lcd_write_cmd(clear);
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_write_cmd>
			lcd_write_cmd(0xc0);
 13e:	80 ec       	ldi	r24, 0xC0	; 192
 140:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_write_cmd>
			uint8_t data = I2C_read_ack();
 144:	0e 94 77 00 	call	0xee	; 0xee <I2C_read_ack>
			lcd_write_number(data);
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <lcd_write_number>
 14e:	f0 cf       	rjmp	.-32     	; 0x130 <main+0xa>

00000150 <IntToString>:
void lcd_write_number(uint16_t data){
	IntToString(data,txt);
	lcd_write_txt(txt);
}

void IntToString(uint16_t number, uint8_t *txt){
 150:	fb 01       	movw	r30, r22
	
	if(number < 10){
 152:	8a 30       	cpi	r24, 0x0A	; 10
 154:	91 05       	cpc	r25, r1
 156:	40 f4       	brcc	.+16     	; 0x168 <IntToString+0x18>
		txt[0] = number % 10 + 48;
 158:	6a e0       	ldi	r22, 0x0A	; 10
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	0e 94 a3 01 	call	0x346	; 0x346 <__udivmodhi4>
 160:	80 5d       	subi	r24, 0xD0	; 208
 162:	80 83       	st	Z, r24
		txt[1] = '\0';
 164:	11 82       	std	Z+1, r1	; 0x01
 166:	08 95       	ret
	}
	else if(number < 100){
 168:	84 36       	cpi	r24, 0x64	; 100
 16a:	91 05       	cpc	r25, r1
 16c:	50 f4       	brcc	.+20     	; 0x182 <IntToString+0x32>
		txt[0] = number / 10 + 48;
 16e:	6a e0       	ldi	r22, 0x0A	; 10
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 a3 01 	call	0x346	; 0x346 <__udivmodhi4>
 176:	60 5d       	subi	r22, 0xD0	; 208
 178:	60 83       	st	Z, r22
		txt[1] = number % 10 + 48;
 17a:	80 5d       	subi	r24, 0xD0	; 208
 17c:	81 83       	std	Z+1, r24	; 0x01
		txt[2] = '\0';
 17e:	12 82       	std	Z+2, r1	; 0x02
 180:	08 95       	ret
	}
	else if(number < 1000){
 182:	23 e0       	ldi	r18, 0x03	; 3
 184:	88 3e       	cpi	r24, 0xE8	; 232
 186:	92 07       	cpc	r25, r18
 188:	80 f4       	brcc	.+32     	; 0x1aa <IntToString+0x5a>
		txt[0] = number / 100 + 48;
 18a:	64 e6       	ldi	r22, 0x64	; 100
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	0e 94 a3 01 	call	0x346	; 0x346 <__udivmodhi4>
 192:	60 5d       	subi	r22, 0xD0	; 208
 194:	60 83       	st	Z, r22
		number = number % 100 ;
		txt[1] = number / 10 + 48;
 196:	6a e0       	ldi	r22, 0x0A	; 10
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	0e 94 a3 01 	call	0x346	; 0x346 <__udivmodhi4>
 19e:	60 5d       	subi	r22, 0xD0	; 208
 1a0:	61 83       	std	Z+1, r22	; 0x01
		txt[2] = number % 10 + 48;
 1a2:	80 5d       	subi	r24, 0xD0	; 208
 1a4:	82 83       	std	Z+2, r24	; 0x02
		txt[3] = '\0';
 1a6:	13 82       	std	Z+3, r1	; 0x03
 1a8:	08 95       	ret
	}
	else  if(number < 10000){
 1aa:	27 e2       	ldi	r18, 0x27	; 39
 1ac:	80 31       	cpi	r24, 0x10	; 16
 1ae:	92 07       	cpc	r25, r18
 1b0:	b0 f4       	brcc	.+44     	; 0x1de <IntToString+0x8e>
		txt[0] = number / 1000 + 48;
 1b2:	68 ee       	ldi	r22, 0xE8	; 232
 1b4:	73 e0       	ldi	r23, 0x03	; 3
 1b6:	0e 94 a3 01 	call	0x346	; 0x346 <__udivmodhi4>
 1ba:	60 5d       	subi	r22, 0xD0	; 208
 1bc:	60 83       	st	Z, r22
		number = number % 1000 ;
		txt[1] = number / 100 + 48;
 1be:	64 e6       	ldi	r22, 0x64	; 100
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	0e 94 a3 01 	call	0x346	; 0x346 <__udivmodhi4>
 1c6:	60 5d       	subi	r22, 0xD0	; 208
 1c8:	61 83       	std	Z+1, r22	; 0x01
		number = number % 100 ;
		txt[2] = number / 10 + 48;
 1ca:	6a e0       	ldi	r22, 0x0A	; 10
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	0e 94 a3 01 	call	0x346	; 0x346 <__udivmodhi4>
 1d2:	60 5d       	subi	r22, 0xD0	; 208
 1d4:	62 83       	std	Z+2, r22	; 0x02
		txt[3] = number % 10 + 48;
 1d6:	80 5d       	subi	r24, 0xD0	; 208
 1d8:	83 83       	std	Z+3, r24	; 0x03
		txt[4] = '\0';
 1da:	14 82       	std	Z+4, r1	; 0x04
 1dc:	08 95       	ret
	}
	else  if(number < 100000){
		txt[0] = number / 10000 + 48;
 1de:	60 e1       	ldi	r22, 0x10	; 16
 1e0:	77 e2       	ldi	r23, 0x27	; 39
 1e2:	0e 94 a3 01 	call	0x346	; 0x346 <__udivmodhi4>
 1e6:	60 5d       	subi	r22, 0xD0	; 208
 1e8:	60 83       	st	Z, r22
		number = number % 10000 ;
		txt[1] = number / 1000 + 48;
 1ea:	68 ee       	ldi	r22, 0xE8	; 232
 1ec:	73 e0       	ldi	r23, 0x03	; 3
 1ee:	0e 94 a3 01 	call	0x346	; 0x346 <__udivmodhi4>
 1f2:	60 5d       	subi	r22, 0xD0	; 208
 1f4:	61 83       	std	Z+1, r22	; 0x01
		number = number % 1000 ;
		txt[2] = number / 100 + 48;
 1f6:	64 e6       	ldi	r22, 0x64	; 100
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	0e 94 a3 01 	call	0x346	; 0x346 <__udivmodhi4>
 1fe:	60 5d       	subi	r22, 0xD0	; 208
 200:	62 83       	std	Z+2, r22	; 0x02
		number = number % 100 ;
		txt[3] = number / 10 + 48;
 202:	6a e0       	ldi	r22, 0x0A	; 10
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	0e 94 a3 01 	call	0x346	; 0x346 <__udivmodhi4>
 20a:	60 5d       	subi	r22, 0xD0	; 208
 20c:	63 83       	std	Z+3, r22	; 0x03
		txt[4] = number % 10 + 48;
 20e:	80 5d       	subi	r24, 0xD0	; 208
 210:	84 83       	std	Z+4, r24	; 0x04
		txt[5] = '\0';
 212:	15 82       	std	Z+5, r1	; 0x05
 214:	08 95       	ret

00000216 <lcd_send_pulse_for_update_data_or_cmd>:
	}
}

void lcd_send_pulse_for_update_data_or_cmd(){
	EN(1);
 216:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	8f ec       	ldi	r24, 0xCF	; 207
 21a:	97 e0       	ldi	r25, 0x07	; 7
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <lcd_send_pulse_for_update_data_or_cmd+0x6>
 220:	00 c0       	rjmp	.+0      	; 0x222 <lcd_send_pulse_for_update_data_or_cmd+0xc>
 222:	00 00       	nop
	_delay_ms(1);
	EN(0);
 224:	c3 98       	cbi	0x18, 3	; 24
 226:	8f ec       	ldi	r24, 0xCF	; 207
 228:	97 e0       	ldi	r25, 0x07	; 7
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_send_pulse_for_update_data_or_cmd+0x14>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_send_pulse_for_update_data_or_cmd+0x1a>
 230:	00 00       	nop
	_delay_ms(1);
}
 232:	08 95       	ret

00000234 <lcd_write>:
	lcd_write_cmd(0x06);  // increment cursor right
	lcd_write_cmd(0x80);  // set courser at the beginning of the first line
	_delay_ms(20);
}

void lcd_write(uint8_t cmd){
 234:	cf 93       	push	r28
 236:	c8 2f       	mov	r28, r24
	// read first 4 bit
	D7(READBIT(cmd,7)); 
 238:	88 23       	and	r24, r24
 23a:	14 f0       	brlt	.+4      	; 0x240 <lcd_write+0xc>
 23c:	df 98       	cbi	0x1b, 7	; 27
 23e:	01 c0       	rjmp	.+2      	; 0x242 <lcd_write+0xe>
 240:	df 9a       	sbi	0x1b, 7	; 27
	D6(READBIT(cmd,6));
 242:	8c 2f       	mov	r24, r28
 244:	82 95       	swap	r24
 246:	86 95       	lsr	r24
 248:	86 95       	lsr	r24
 24a:	83 70       	andi	r24, 0x03	; 3
 24c:	80 fd       	sbrc	r24, 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <lcd_write+0x20>
 250:	de 98       	cbi	0x1b, 6	; 27
 252:	01 c0       	rjmp	.+2      	; 0x256 <lcd_write+0x22>
 254:	de 9a       	sbi	0x1b, 6	; 27
	D5(READBIT(cmd,5));
 256:	8c 2f       	mov	r24, r28
 258:	82 95       	swap	r24
 25a:	86 95       	lsr	r24
 25c:	87 70       	andi	r24, 0x07	; 7
 25e:	80 fd       	sbrc	r24, 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <lcd_write+0x32>
 262:	dd 98       	cbi	0x1b, 5	; 27
 264:	01 c0       	rjmp	.+2      	; 0x268 <lcd_write+0x34>
 266:	dd 9a       	sbi	0x1b, 5	; 27
	D4(READBIT(cmd,4));
 268:	8c 2f       	mov	r24, r28
 26a:	82 95       	swap	r24
 26c:	8f 70       	andi	r24, 0x0F	; 15
 26e:	80 fd       	sbrc	r24, 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <lcd_write+0x42>
 272:	dc 98       	cbi	0x1b, 4	; 27
 274:	01 c0       	rjmp	.+2      	; 0x278 <lcd_write+0x44>
 276:	dc 9a       	sbi	0x1b, 4	; 27

	lcd_send_pulse_for_update_data_or_cmd();
 278:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_send_pulse_for_update_data_or_cmd>

	// read second 4 bit
	D7(READBIT(cmd,3));
 27c:	8c 2f       	mov	r24, r28
 27e:	86 95       	lsr	r24
 280:	86 95       	lsr	r24
 282:	86 95       	lsr	r24
 284:	80 fd       	sbrc	r24, 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <lcd_write+0x58>
 288:	df 98       	cbi	0x1b, 7	; 27
 28a:	01 c0       	rjmp	.+2      	; 0x28e <lcd_write+0x5a>
 28c:	df 9a       	sbi	0x1b, 7	; 27
	D6(READBIT(cmd,2));
 28e:	8c 2f       	mov	r24, r28
 290:	86 95       	lsr	r24
 292:	86 95       	lsr	r24
 294:	80 fd       	sbrc	r24, 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <lcd_write+0x68>
 298:	de 98       	cbi	0x1b, 6	; 27
 29a:	01 c0       	rjmp	.+2      	; 0x29e <lcd_write+0x6a>
 29c:	de 9a       	sbi	0x1b, 6	; 27
	D5(READBIT(cmd,1));
 29e:	8c 2f       	mov	r24, r28
 2a0:	86 95       	lsr	r24
 2a2:	80 fd       	sbrc	r24, 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <lcd_write+0x76>
 2a6:	dd 98       	cbi	0x1b, 5	; 27
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <lcd_write+0x78>
 2aa:	dd 9a       	sbi	0x1b, 5	; 27
	D4(READBIT(cmd,0));
 2ac:	c0 fd       	sbrc	r28, 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <lcd_write+0x80>
 2b0:	dc 98       	cbi	0x1b, 4	; 27
 2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <lcd_write+0x82>
 2b4:	dc 9a       	sbi	0x1b, 4	; 27

	lcd_send_pulse_for_update_data_or_cmd();
 2b6:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_send_pulse_for_update_data_or_cmd>
}
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <lcd_write_char>:
	RS(0); // Rs = 0
	lcd_write(cmd);
}

void lcd_write_char(uint8_t cmd){
	RS(1); // Rs = 1
 2be:	c1 9a       	sbi	0x18, 1	; 24
	lcd_write(cmd);
 2c0:	0e 94 1a 01 	call	0x234	; 0x234 <lcd_write>
}
 2c4:	08 95       	ret

000002c6 <lcd_write_txt>:


void lcd_write_txt(uint8_t *x){
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	ec 01       	movw	r28, r24
	for(int i = 0; x[i] != '\0'; i++)
 2cc:	88 81       	ld	r24, Y
 2ce:	88 23       	and	r24, r24
 2d0:	31 f0       	breq	.+12     	; 0x2de <lcd_write_txt+0x18>
	RS(1); // Rs = 1
	lcd_write(cmd);
}


void lcd_write_txt(uint8_t *x){
 2d2:	21 96       	adiw	r28, 0x01	; 1
	for(int i = 0; x[i] != '\0'; i++)
		lcd_write_char(x[i]);
 2d4:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_write_char>
	lcd_write(cmd);
}


void lcd_write_txt(uint8_t *x){
	for(int i = 0; x[i] != '\0'; i++)
 2d8:	89 91       	ld	r24, Y+
 2da:	88 23       	and	r24, r24
 2dc:	d9 f7       	brne	.-10     	; 0x2d4 <lcd_write_txt+0xe>
		lcd_write_char(x[i]);
}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <lcd_write_number>:

void lcd_write_number(uint16_t data){
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
	IntToString(data,txt);
 2e8:	c0 e6       	ldi	r28, 0x60	; 96
 2ea:	d0 e0       	ldi	r29, 0x00	; 0
 2ec:	be 01       	movw	r22, r28
 2ee:	0e 94 a8 00 	call	0x150	; 0x150 <IntToString>
	lcd_write_txt(txt);
 2f2:	ce 01       	movw	r24, r28
 2f4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_write_txt>
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <lcd_write_cmd>:
	lcd_send_pulse_for_update_data_or_cmd();
}


void lcd_write_cmd(uint8_t cmd){
	RS(0); // Rs = 0
 2fe:	c1 98       	cbi	0x18, 1	; 24
	lcd_write(cmd);
 300:	0e 94 1a 01 	call	0x234	; 0x234 <lcd_write>
}
 304:	08 95       	ret

00000306 <lcd_init>:

#include "lcd.h"
uint8_t txt[5];

void lcd_init(){
	INIT_PORT;
 306:	8a b3       	in	r24, 0x1a	; 26
 308:	80 6f       	ori	r24, 0xF0	; 240
 30a:	8a bb       	out	0x1a, r24	; 26
 30c:	87 b3       	in	r24, 0x17	; 23
 30e:	8e 60       	ori	r24, 0x0E	; 14
 310:	87 bb       	out	0x17, r24	; 23
	Rw(0);
 312:	c2 98       	cbi	0x18, 2	; 24
	lcd_write_cmd(0x2);
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_write_cmd>
	lcd_write_cmd(0x28);  // 4data line
 31a:	88 e2       	ldi	r24, 0x28	; 40
 31c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_write_cmd>
	lcd_write_cmd(0x01);
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_write_cmd>
	lcd_write_cmd(0x0c);  // display on cursor off
 326:	8c e0       	ldi	r24, 0x0C	; 12
 328:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_write_cmd>
	lcd_write_cmd(0x06);  // increment cursor right
 32c:	86 e0       	ldi	r24, 0x06	; 6
 32e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_write_cmd>
	lcd_write_cmd(0x80);  // set courser at the beginning of the first line
 332:	80 e8       	ldi	r24, 0x80	; 128
 334:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_write_cmd>
 338:	8f e3       	ldi	r24, 0x3F	; 63
 33a:	9c e9       	ldi	r25, 0x9C	; 156
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <lcd_init+0x36>
 340:	00 c0       	rjmp	.+0      	; 0x342 <lcd_init+0x3c>
 342:	00 00       	nop
	_delay_ms(20);
}
 344:	08 95       	ret

00000346 <__udivmodhi4>:
 346:	aa 1b       	sub	r26, r26
 348:	bb 1b       	sub	r27, r27
 34a:	51 e1       	ldi	r21, 0x11	; 17
 34c:	07 c0       	rjmp	.+14     	; 0x35c <__udivmodhi4_ep>

0000034e <__udivmodhi4_loop>:
 34e:	aa 1f       	adc	r26, r26
 350:	bb 1f       	adc	r27, r27
 352:	a6 17       	cp	r26, r22
 354:	b7 07       	cpc	r27, r23
 356:	10 f0       	brcs	.+4      	; 0x35c <__udivmodhi4_ep>
 358:	a6 1b       	sub	r26, r22
 35a:	b7 0b       	sbc	r27, r23

0000035c <__udivmodhi4_ep>:
 35c:	88 1f       	adc	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	5a 95       	dec	r21
 362:	a9 f7       	brne	.-22     	; 0x34e <__udivmodhi4_loop>
 364:	80 95       	com	r24
 366:	90 95       	com	r25
 368:	bc 01       	movw	r22, r24
 36a:	cd 01       	movw	r24, r26
 36c:	08 95       	ret

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
