
app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000b9c  00000c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800084  00800084  00000c54  2**0
                  ALLOC
  3 .stab         00001d7c  00000000  00000000  00000c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005eb  00000000  00000000  000029d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00002fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f06  00000000  00000000  00003160  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000678  00000000  00000000  00004066  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c70  00000000  00000000  000046de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  00005350  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000374  00000000  00000000  000056f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000540  00000000  00000000  00005a6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 34 03 	jmp	0x668	; 0x668 <__vector_10>
  2c:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 39       	cpi	r26, 0x99	; 153
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  8a:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC0_init>:
 *  Author: Administrator
 */ 
#include"ADC.h"

void ADC0_init(){
	ADCSRA = 0b10000111;
  92:	87 e8       	ldi	r24, 0x87	; 135
  94:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	87 b9       	out	0x07, r24	; 7
}
  9a:	08 95       	ret

0000009c <ADC_update_value>:
uint16_t ADC_update_value(){
	ADCSRA |= 1<<6;
  9c:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & 1<<6));
  9e:	36 99       	sbic	0x06, 6	; 6
  a0:	fe cf       	rjmp	.-4      	; 0x9e <ADC_update_value+0x2>
	return (ADCL+ (ADCH << 8));
  a2:	24 b1       	in	r18, 0x04	; 4
  a4:	35 b1       	in	r19, 0x05	; 5
  a6:	93 2f       	mov	r25, r19
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	82 0f       	add	r24, r18
  ac:	91 1d       	adc	r25, r1
}
  ae:	08 95       	ret

000000b0 <main>:
#include "UART.h"
#define ADC_PWM 0
#define uart 0
int main(void)
{
	I2C_Slave_Init(0x50); //slave
  b0:	80 e5       	ldi	r24, 0x50	; 80
  b2:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Slave_Init>
//	I2C_init();//master
	uint8_t i = 0;
	Uart_init(9600);
  b6:	80 e8       	ldi	r24, 0x80	; 128
  b8:	95 e2       	ldi	r25, 0x25	; 37
  ba:	0e 94 ab 03 	call	0x756	; 0x756 <Uart_init>
	lcd_init();
  be:	0e 94 1c 02 	call	0x438	; 0x438 <lcd_init>
	PWM1_OCR1A_init();
  c2:	0e 94 3c 02 	call	0x478	; 0x478 <PWM1_OCR1A_init>
	PWM1_OCR1B_init();
  c6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <PWM1_OCR1B_init>
	ADC0_init();
  ca:	0e 94 49 00 	call	0x92	; 0x92 <ADC0_init>
	lcd_write_cmd(0x80);
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	0e 94 18 02 	call	0x430	; 0x430 <lcd_write_cmd>
	lcd_write_txt((uint8_t*)"ADC_value = ");
  d4:	80 e6       	ldi	r24, 0x60	; 96
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_write_txt>
		
		//slave read
		if (I2C_Slave_avialable())
		{
			lcd_write_cmd(nd_line);
			lcd_write_txt("      ");
  dc:	cd e6       	ldi	r28, 0x6D	; 109
  de:	d0 e0       	ldi	r29, 0x00	; 0
		I2C_stop();
		_delay_ms(1000);
*/
		
		//slave read
		if (I2C_Slave_avialable())
  e0:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_Slave_avialable>
  e4:	88 23       	and	r24, r24
  e6:	e1 f3       	breq	.-8      	; 0xe0 <main+0x30>
		{
			lcd_write_cmd(nd_line);
  e8:	80 ec       	ldi	r24, 0xC0	; 192
  ea:	0e 94 18 02 	call	0x430	; 0x430 <lcd_write_cmd>
			lcd_write_txt("      ");
  ee:	ce 01       	movw	r24, r28
  f0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_write_txt>
			lcd_write_cmd(nd_line);
  f4:	80 ec       	ldi	r24, 0xC0	; 192
  f6:	0e 94 18 02 	call	0x430	; 0x430 <lcd_write_cmd>
			lcd_write_number(I2C_read_ack());
  fa:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_read_ack>
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 0b 02 	call	0x416	; 0x416 <lcd_write_number>
 104:	ed cf       	rjmp	.-38     	; 0xe0 <main+0x30>

00000106 <I2C_init>:
#define F_SCL 800000UL // SCL frequency
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)
void I2C_init(void)
{
	TWBR = (uint8_t)TWBR_val;
 106:	8d ef       	ldi	r24, 0xFD	; 253
 108:	80 b9       	out	0x00, r24	; 0
}
 10a:	08 95       	ret

0000010c <I2C_start>:

uint8_t I2C_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
 10c:	16 be       	out	0x36, r1	; 54
	// transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 10e:	94 ea       	ldi	r25, 0xA4	; 164
 110:	96 bf       	out	0x36, r25	; 54
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 112:	06 b6       	in	r0, 0x36	; 54
 114:	07 fe       	sbrs	r0, 7
 116:	fd cf       	rjmp	.-6      	; 0x112 <I2C_start+0x6>
	
	// check if the start condition was successfully transmitted
if((TWSR & 0xF8) != TW_START){ return 1; }
 118:	91 b1       	in	r25, 0x01	; 1
 11a:	98 7f       	andi	r25, 0xF8	; 248
 11c:	98 30       	cpi	r25, 0x08	; 8
 11e:	81 f4       	brne	.+32     	; 0x140 <I2C_start+0x34>

// load slave address into data register
TWDR = address<<1;
 120:	88 0f       	add	r24, r24
 122:	83 b9       	out	0x03, r24	; 3
// start transmission of address
TWCR = (1<<TWINT) | (1<<TWEN);
 124:	84 e8       	ldi	r24, 0x84	; 132
 126:	86 bf       	out	0x36, r24	; 54
// wait for end of transmission
while( !(TWCR & (1<<TWINT)) );
 128:	06 b6       	in	r0, 0x36	; 54
 12a:	07 fe       	sbrs	r0, 7
 12c:	fd cf       	rjmp	.-6      	; 0x128 <I2C_start+0x1c>

// check if the device has acknowledged the READ / WRITE mode
uint8_t twst = TW_STATUS & 0xF8;
 12e:	91 b1       	in	r25, 0x01	; 1
 130:	98 7f       	andi	r25, 0xF8	; 248
if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 132:	98 31       	cpi	r25, 0x18	; 24
 134:	39 f0       	breq	.+14     	; 0x144 <I2C_start+0x38>
void I2C_init(void)
{
	TWBR = (uint8_t)TWBR_val;
}

uint8_t I2C_start(uint8_t address)
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 34       	cpi	r25, 0x40	; 64
 13a:	29 f4       	brne	.+10     	; 0x146 <I2C_start+0x3a>
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
if((TWSR & 0xF8) != TW_START){ return 1; }
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	08 95       	ret

// check if the device has acknowledged the READ / WRITE mode
uint8_t twst = TW_STATUS & 0xF8;
if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

return 0;
 144:	80 e0       	ldi	r24, 0x00	; 0
}
 146:	08 95       	ret

00000148 <I2C_write>:

uint8_t I2C_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
 148:	83 b9       	out	0x03, r24	; 3
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
 14a:	84 e8       	ldi	r24, 0x84	; 132
 14c:	86 bf       	out	0x36, r24	; 54
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 14e:	06 b6       	in	r0, 0x36	; 54
 150:	07 fe       	sbrs	r0, 7
 152:	fd cf       	rjmp	.-6      	; 0x14e <I2C_write+0x6>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
 154:	91 b1       	in	r25, 0x01	; 1
 156:	98 7f       	andi	r25, 0xF8	; 248
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	98 32       	cpi	r25, 0x28	; 40
 15c:	09 f4       	brne	.+2      	; 0x160 <I2C_write+0x18>
 15e:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
 160:	08 95       	ret

00000162 <I2C_read_ack>:

uint8_t I2C_read_ack(void)
{
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 162:	84 ec       	ldi	r24, 0xC4	; 196
 164:	86 bf       	out	0x36, r24	; 54
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 166:	06 b6       	in	r0, 0x36	; 54
 168:	07 fe       	sbrs	r0, 7
 16a:	fd cf       	rjmp	.-6      	; 0x166 <I2C_read_ack+0x4>
	// return received data from TWDR
	return TWDR;
 16c:	83 b1       	in	r24, 0x03	; 3
}
 16e:	08 95       	ret

00000170 <I2C_stop>:

void I2C_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 170:	84 e9       	ldi	r24, 0x94	; 148
 172:	86 bf       	out	0x36, r24	; 54
}
 174:	08 95       	ret

00000176 <I2C_Slave_Init>:
void I2C_Slave_Init(unsigned char My_Add){
	TWAR = My_Add<<1;
 176:	88 0f       	add	r24, r24
 178:	82 b9       	out	0x02, r24	; 2
	TWCR = (1<<TWEA) | (1<<TWINT) | (1<<TWEN);
 17a:	84 ec       	ldi	r24, 0xC4	; 196
 17c:	86 bf       	out	0x36, r24	; 54
}
 17e:	08 95       	ret

00000180 <I2C_Slave_avialable>:

unsigned char I2C_Slave_avialable(){	
	TWCR |= (1<<TWINT) | (1<<TWEN);
 180:	86 b7       	in	r24, 0x36	; 54
 182:	84 68       	ori	r24, 0x84	; 132
 184:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
 186:	06 b6       	in	r0, 0x36	; 54
 188:	07 fe       	sbrs	r0, 7
 18a:	fd cf       	rjmp	.-6      	; 0x186 <I2C_Slave_avialable+0x6>
	if((TWSR & 0xF8) == TW_SR_SLA_ACK) 
 18c:	91 b1       	in	r25, 0x01	; 1
 18e:	98 7f       	andi	r25, 0xF8	; 248
	return 1;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 36       	cpi	r25, 0x60	; 96
 194:	09 f0       	breq	.+2      	; 0x198 <I2C_Slave_avialable+0x18>
 196:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
 198:	08 95       	ret

0000019a <keypad_init>:
	'5','6','7','8',
	'9','A','B','C',
	'D','E','F','G',
};
void keypad_init(){
	mykeypadport
 19a:	8f e0       	ldi	r24, 0x0F	; 15
 19c:	81 bb       	out	0x11, r24	; 17
	pullup
 19e:	80 ef       	ldi	r24, 0xF0	; 240
 1a0:	82 bb       	out	0x12, r24	; 18
}
 1a2:	08 95       	ret

000001a4 <press>:
int8_t press(int8_t i){
	if(!k5 )return keypad_matrix[0+i*4];
 1a4:	90 b3       	in	r25, 0x10	; 16
 1a6:	92 95       	swap	r25
 1a8:	9f 70       	andi	r25, 0x0F	; 15
 1aa:	90 fd       	sbrc	r25, 0
 1ac:	0c c0       	rjmp	.+24     	; 0x1c6 <press+0x22>
 1ae:	e8 2f       	mov	r30, r24
 1b0:	ff 27       	eor	r31, r31
 1b2:	e7 fd       	sbrc	r30, 7
 1b4:	f0 95       	com	r31
 1b6:	ee 0f       	add	r30, r30
 1b8:	ff 1f       	adc	r31, r31
 1ba:	ee 0f       	add	r30, r30
 1bc:	ff 1f       	adc	r31, r31
 1be:	ec 58       	subi	r30, 0x8C	; 140
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	80 81       	ld	r24, Z
 1c4:	08 95       	ret
	if(!k6 )return keypad_matrix[1+i*4];
 1c6:	90 b3       	in	r25, 0x10	; 16
 1c8:	92 95       	swap	r25
 1ca:	96 95       	lsr	r25
 1cc:	97 70       	andi	r25, 0x07	; 7
 1ce:	90 fd       	sbrc	r25, 0
 1d0:	0c c0       	rjmp	.+24     	; 0x1ea <press+0x46>
 1d2:	e8 2f       	mov	r30, r24
 1d4:	ff 27       	eor	r31, r31
 1d6:	e7 fd       	sbrc	r30, 7
 1d8:	f0 95       	com	r31
 1da:	ee 0f       	add	r30, r30
 1dc:	ff 1f       	adc	r31, r31
 1de:	ee 0f       	add	r30, r30
 1e0:	ff 1f       	adc	r31, r31
 1e2:	ec 58       	subi	r30, 0x8C	; 140
 1e4:	ff 4f       	sbci	r31, 0xFF	; 255
 1e6:	81 81       	ldd	r24, Z+1	; 0x01
 1e8:	08 95       	ret
	if(!k7 )return keypad_matrix[2+i*4];
 1ea:	90 b3       	in	r25, 0x10	; 16
 1ec:	92 95       	swap	r25
 1ee:	96 95       	lsr	r25
 1f0:	96 95       	lsr	r25
 1f2:	93 70       	andi	r25, 0x03	; 3
 1f4:	90 fd       	sbrc	r25, 0
 1f6:	0c c0       	rjmp	.+24     	; 0x210 <press+0x6c>
 1f8:	e8 2f       	mov	r30, r24
 1fa:	ff 27       	eor	r31, r31
 1fc:	e7 fd       	sbrc	r30, 7
 1fe:	f0 95       	com	r31
 200:	ee 0f       	add	r30, r30
 202:	ff 1f       	adc	r31, r31
 204:	ee 0f       	add	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	ec 58       	subi	r30, 0x8C	; 140
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	82 81       	ldd	r24, Z+2	; 0x02
 20e:	08 95       	ret
	if(!k8 )return keypad_matrix[3+i*4];
 210:	87 99       	sbic	0x10, 7	; 16
 212:	0c c0       	rjmp	.+24     	; 0x22c <press+0x88>
 214:	e8 2f       	mov	r30, r24
 216:	ff 27       	eor	r31, r31
 218:	e7 fd       	sbrc	r30, 7
 21a:	f0 95       	com	r31
 21c:	ee 0f       	add	r30, r30
 21e:	ff 1f       	adc	r31, r31
 220:	ee 0f       	add	r30, r30
 222:	ff 1f       	adc	r31, r31
 224:	ec 58       	subi	r30, 0x8C	; 140
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	83 81       	ldd	r24, Z+3	; 0x03
 22a:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	8f e1       	ldi	r24, 0x1F	; 31
 22e:	9e e4       	ldi	r25, 0x4E	; 78
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <press+0x8c>
 234:	00 c0       	rjmp	.+0      	; 0x236 <press+0x92>
 236:	00 00       	nop
	_delay_ms(10);
	return -1;
 238:	8f ef       	ldi	r24, 0xFF	; 255
}
 23a:	08 95       	ret

0000023c <keypad_click>:
int8_t keypad_click(){
	int8_t k;
	k1(0);k2(1);k3(1);k4(1);	k = press(0); if(k != -1)	return k;
 23c:	90 98       	cbi	0x12, 0	; 18
 23e:	91 9a       	sbi	0x12, 1	; 18
 240:	92 9a       	sbi	0x12, 2	; 18
 242:	93 9a       	sbi	0x12, 3	; 18
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <press>
 24a:	8f 3f       	cpi	r24, 0xFF	; 255
 24c:	c9 f4       	brne	.+50     	; 0x280 <keypad_click+0x44>
	k1(1);k2(0);k3(1);k4(1);	k = press(1); if(k != -1)	return k;
 24e:	90 9a       	sbi	0x12, 0	; 18
 250:	91 98       	cbi	0x12, 1	; 18
 252:	92 9a       	sbi	0x12, 2	; 18
 254:	93 9a       	sbi	0x12, 3	; 18
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <press>
 25c:	8f 3f       	cpi	r24, 0xFF	; 255
 25e:	81 f4       	brne	.+32     	; 0x280 <keypad_click+0x44>
	k1(1);k2(1);k3(0);k4(1);	k = press(2); if(k != -1)	return k;
 260:	90 9a       	sbi	0x12, 0	; 18
 262:	91 9a       	sbi	0x12, 1	; 18
 264:	92 98       	cbi	0x12, 2	; 18
 266:	93 9a       	sbi	0x12, 3	; 18
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <press>
 26e:	8f 3f       	cpi	r24, 0xFF	; 255
 270:	39 f4       	brne	.+14     	; 0x280 <keypad_click+0x44>
	k1(1);k2(1);k3(1);k4(0);	k = press(3); if(k != -1)	return k;
 272:	90 9a       	sbi	0x12, 0	; 18
 274:	91 9a       	sbi	0x12, 1	; 18
 276:	92 9a       	sbi	0x12, 2	; 18
 278:	93 98       	cbi	0x12, 3	; 18
 27a:	83 e0       	ldi	r24, 0x03	; 3
 27c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <press>
	return -1;
 280:	08 95       	ret

00000282 <IntToString>:
void lcd_write_number(uint16_t data){
	IntToString(data,txt);
	lcd_write_txt(txt);
}

void IntToString(uint16_t number, uint8_t *txt){
 282:	fb 01       	movw	r30, r22
	
	if(number < 10){
 284:	8a 30       	cpi	r24, 0x0A	; 10
 286:	91 05       	cpc	r25, r1
 288:	40 f4       	brcc	.+16     	; 0x29a <IntToString+0x18>
		txt[0] = number % 10 + 48;
 28a:	6a e0       	ldi	r22, 0x0A	; 10
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	0e 94 96 05 	call	0xb2c	; 0xb2c <__udivmodhi4>
 292:	80 5d       	subi	r24, 0xD0	; 208
 294:	80 83       	st	Z, r24
		txt[1] = '\0';
 296:	11 82       	std	Z+1, r1	; 0x01
 298:	08 95       	ret
	}
	else if(number < 100){
 29a:	84 36       	cpi	r24, 0x64	; 100
 29c:	91 05       	cpc	r25, r1
 29e:	50 f4       	brcc	.+20     	; 0x2b4 <IntToString+0x32>
		txt[0] = number / 10 + 48;
 2a0:	6a e0       	ldi	r22, 0x0A	; 10
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	0e 94 96 05 	call	0xb2c	; 0xb2c <__udivmodhi4>
 2a8:	60 5d       	subi	r22, 0xD0	; 208
 2aa:	60 83       	st	Z, r22
		txt[1] = number % 10 + 48;
 2ac:	80 5d       	subi	r24, 0xD0	; 208
 2ae:	81 83       	std	Z+1, r24	; 0x01
		txt[2] = '\0';
 2b0:	12 82       	std	Z+2, r1	; 0x02
 2b2:	08 95       	ret
	}
	else if(number < 1000){
 2b4:	23 e0       	ldi	r18, 0x03	; 3
 2b6:	88 3e       	cpi	r24, 0xE8	; 232
 2b8:	92 07       	cpc	r25, r18
 2ba:	80 f4       	brcc	.+32     	; 0x2dc <IntToString+0x5a>
		txt[0] = number / 100 + 48;
 2bc:	64 e6       	ldi	r22, 0x64	; 100
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	0e 94 96 05 	call	0xb2c	; 0xb2c <__udivmodhi4>
 2c4:	60 5d       	subi	r22, 0xD0	; 208
 2c6:	60 83       	st	Z, r22
		number = number % 100 ;
		txt[1] = number / 10 + 48;
 2c8:	6a e0       	ldi	r22, 0x0A	; 10
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	0e 94 96 05 	call	0xb2c	; 0xb2c <__udivmodhi4>
 2d0:	60 5d       	subi	r22, 0xD0	; 208
 2d2:	61 83       	std	Z+1, r22	; 0x01
		txt[2] = number % 10 + 48;
 2d4:	80 5d       	subi	r24, 0xD0	; 208
 2d6:	82 83       	std	Z+2, r24	; 0x02
		txt[3] = '\0';
 2d8:	13 82       	std	Z+3, r1	; 0x03
 2da:	08 95       	ret
	}
	else  if(number < 10000){
 2dc:	27 e2       	ldi	r18, 0x27	; 39
 2de:	80 31       	cpi	r24, 0x10	; 16
 2e0:	92 07       	cpc	r25, r18
 2e2:	b0 f4       	brcc	.+44     	; 0x310 <IntToString+0x8e>
		txt[0] = number / 1000 + 48;
 2e4:	68 ee       	ldi	r22, 0xE8	; 232
 2e6:	73 e0       	ldi	r23, 0x03	; 3
 2e8:	0e 94 96 05 	call	0xb2c	; 0xb2c <__udivmodhi4>
 2ec:	60 5d       	subi	r22, 0xD0	; 208
 2ee:	60 83       	st	Z, r22
		number = number % 1000 ;
		txt[1] = number / 100 + 48;
 2f0:	64 e6       	ldi	r22, 0x64	; 100
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	0e 94 96 05 	call	0xb2c	; 0xb2c <__udivmodhi4>
 2f8:	60 5d       	subi	r22, 0xD0	; 208
 2fa:	61 83       	std	Z+1, r22	; 0x01
		number = number % 100 ;
		txt[2] = number / 10 + 48;
 2fc:	6a e0       	ldi	r22, 0x0A	; 10
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	0e 94 96 05 	call	0xb2c	; 0xb2c <__udivmodhi4>
 304:	60 5d       	subi	r22, 0xD0	; 208
 306:	62 83       	std	Z+2, r22	; 0x02
		txt[3] = number % 10 + 48;
 308:	80 5d       	subi	r24, 0xD0	; 208
 30a:	83 83       	std	Z+3, r24	; 0x03
		txt[4] = '\0';
 30c:	14 82       	std	Z+4, r1	; 0x04
 30e:	08 95       	ret
	}
	else  if(number < 100000){
		txt[0] = number / 10000 + 48;
 310:	60 e1       	ldi	r22, 0x10	; 16
 312:	77 e2       	ldi	r23, 0x27	; 39
 314:	0e 94 96 05 	call	0xb2c	; 0xb2c <__udivmodhi4>
 318:	60 5d       	subi	r22, 0xD0	; 208
 31a:	60 83       	st	Z, r22
		number = number % 10000 ;
		txt[1] = number / 1000 + 48;
 31c:	68 ee       	ldi	r22, 0xE8	; 232
 31e:	73 e0       	ldi	r23, 0x03	; 3
 320:	0e 94 96 05 	call	0xb2c	; 0xb2c <__udivmodhi4>
 324:	60 5d       	subi	r22, 0xD0	; 208
 326:	61 83       	std	Z+1, r22	; 0x01
		number = number % 1000 ;
		txt[2] = number / 100 + 48;
 328:	64 e6       	ldi	r22, 0x64	; 100
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	0e 94 96 05 	call	0xb2c	; 0xb2c <__udivmodhi4>
 330:	60 5d       	subi	r22, 0xD0	; 208
 332:	62 83       	std	Z+2, r22	; 0x02
		number = number % 100 ;
		txt[3] = number / 10 + 48;
 334:	6a e0       	ldi	r22, 0x0A	; 10
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	0e 94 96 05 	call	0xb2c	; 0xb2c <__udivmodhi4>
 33c:	60 5d       	subi	r22, 0xD0	; 208
 33e:	63 83       	std	Z+3, r22	; 0x03
		txt[4] = number % 10 + 48;
 340:	80 5d       	subi	r24, 0xD0	; 208
 342:	84 83       	std	Z+4, r24	; 0x04
		txt[5] = '\0';
 344:	15 82       	std	Z+5, r1	; 0x05
 346:	08 95       	ret

00000348 <lcd_send_pulse_for_update_data_or_cmd>:
	}
}

void lcd_send_pulse_for_update_data_or_cmd(){
	EN(1);
 348:	c3 9a       	sbi	0x18, 3	; 24
 34a:	8f ec       	ldi	r24, 0xCF	; 207
 34c:	97 e0       	ldi	r25, 0x07	; 7
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <lcd_send_pulse_for_update_data_or_cmd+0x6>
 352:	00 c0       	rjmp	.+0      	; 0x354 <lcd_send_pulse_for_update_data_or_cmd+0xc>
 354:	00 00       	nop
	_delay_ms(1);
	EN(0);
 356:	c3 98       	cbi	0x18, 3	; 24
 358:	8f ec       	ldi	r24, 0xCF	; 207
 35a:	97 e0       	ldi	r25, 0x07	; 7
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_send_pulse_for_update_data_or_cmd+0x14>
 360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_send_pulse_for_update_data_or_cmd+0x1a>
 362:	00 00       	nop
	_delay_ms(1);
}
 364:	08 95       	ret

00000366 <lcd_write>:
	lcd_write_cmd(0x06);  // increment cursor right
	lcd_write_cmd(0x80);  // set courser at the beginning of the first line
	_delay_ms(20);
}

void lcd_write(uint8_t cmd){
 366:	cf 93       	push	r28
 368:	c8 2f       	mov	r28, r24
	// read first 4 bit
	D7(READBIT(cmd,7)); 
 36a:	88 23       	and	r24, r24
 36c:	14 f0       	brlt	.+4      	; 0x372 <lcd_write+0xc>
 36e:	df 98       	cbi	0x1b, 7	; 27
 370:	01 c0       	rjmp	.+2      	; 0x374 <lcd_write+0xe>
 372:	df 9a       	sbi	0x1b, 7	; 27
	D6(READBIT(cmd,6));
 374:	8c 2f       	mov	r24, r28
 376:	82 95       	swap	r24
 378:	86 95       	lsr	r24
 37a:	86 95       	lsr	r24
 37c:	83 70       	andi	r24, 0x03	; 3
 37e:	80 fd       	sbrc	r24, 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <lcd_write+0x20>
 382:	de 98       	cbi	0x1b, 6	; 27
 384:	01 c0       	rjmp	.+2      	; 0x388 <lcd_write+0x22>
 386:	de 9a       	sbi	0x1b, 6	; 27
	D5(READBIT(cmd,5));
 388:	8c 2f       	mov	r24, r28
 38a:	82 95       	swap	r24
 38c:	86 95       	lsr	r24
 38e:	87 70       	andi	r24, 0x07	; 7
 390:	80 fd       	sbrc	r24, 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <lcd_write+0x32>
 394:	dd 98       	cbi	0x1b, 5	; 27
 396:	01 c0       	rjmp	.+2      	; 0x39a <lcd_write+0x34>
 398:	dd 9a       	sbi	0x1b, 5	; 27
	D4(READBIT(cmd,4));
 39a:	8c 2f       	mov	r24, r28
 39c:	82 95       	swap	r24
 39e:	8f 70       	andi	r24, 0x0F	; 15
 3a0:	80 fd       	sbrc	r24, 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <lcd_write+0x42>
 3a4:	dc 98       	cbi	0x1b, 4	; 27
 3a6:	01 c0       	rjmp	.+2      	; 0x3aa <lcd_write+0x44>
 3a8:	dc 9a       	sbi	0x1b, 4	; 27

	lcd_send_pulse_for_update_data_or_cmd();
 3aa:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_send_pulse_for_update_data_or_cmd>

	// read second 4 bit
	D7(READBIT(cmd,3));
 3ae:	8c 2f       	mov	r24, r28
 3b0:	86 95       	lsr	r24
 3b2:	86 95       	lsr	r24
 3b4:	86 95       	lsr	r24
 3b6:	80 fd       	sbrc	r24, 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <lcd_write+0x58>
 3ba:	df 98       	cbi	0x1b, 7	; 27
 3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <lcd_write+0x5a>
 3be:	df 9a       	sbi	0x1b, 7	; 27
	D6(READBIT(cmd,2));
 3c0:	8c 2f       	mov	r24, r28
 3c2:	86 95       	lsr	r24
 3c4:	86 95       	lsr	r24
 3c6:	80 fd       	sbrc	r24, 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <lcd_write+0x68>
 3ca:	de 98       	cbi	0x1b, 6	; 27
 3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <lcd_write+0x6a>
 3ce:	de 9a       	sbi	0x1b, 6	; 27
	D5(READBIT(cmd,1));
 3d0:	8c 2f       	mov	r24, r28
 3d2:	86 95       	lsr	r24
 3d4:	80 fd       	sbrc	r24, 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <lcd_write+0x76>
 3d8:	dd 98       	cbi	0x1b, 5	; 27
 3da:	01 c0       	rjmp	.+2      	; 0x3de <lcd_write+0x78>
 3dc:	dd 9a       	sbi	0x1b, 5	; 27
	D4(READBIT(cmd,0));
 3de:	c0 fd       	sbrc	r28, 0
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <lcd_write+0x80>
 3e2:	dc 98       	cbi	0x1b, 4	; 27
 3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <lcd_write+0x82>
 3e6:	dc 9a       	sbi	0x1b, 4	; 27

	lcd_send_pulse_for_update_data_or_cmd();
 3e8:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_send_pulse_for_update_data_or_cmd>
}
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <lcd_write_char>:
	RS(0); // Rs = 0
	lcd_write(cmd);
}

void lcd_write_char(uint8_t cmd){
	RS(1); // Rs = 1
 3f0:	c1 9a       	sbi	0x18, 1	; 24
	lcd_write(cmd);
 3f2:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_write>
}
 3f6:	08 95       	ret

000003f8 <lcd_write_txt>:


void lcd_write_txt(uint8_t *x){
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	ec 01       	movw	r28, r24
	for(int i = 0; x[i] != '\0'; i++)
 3fe:	88 81       	ld	r24, Y
 400:	88 23       	and	r24, r24
 402:	31 f0       	breq	.+12     	; 0x410 <lcd_write_txt+0x18>
	RS(1); // Rs = 1
	lcd_write(cmd);
}


void lcd_write_txt(uint8_t *x){
 404:	21 96       	adiw	r28, 0x01	; 1
	for(int i = 0; x[i] != '\0'; i++)
		lcd_write_char(x[i]);
 406:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_write_char>
	lcd_write(cmd);
}


void lcd_write_txt(uint8_t *x){
	for(int i = 0; x[i] != '\0'; i++)
 40a:	89 91       	ld	r24, Y+
 40c:	88 23       	and	r24, r24
 40e:	d9 f7       	brne	.-10     	; 0x406 <lcd_write_txt+0xe>
		lcd_write_char(x[i]);
}
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <lcd_write_number>:

void lcd_write_number(uint16_t data){
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
	IntToString(data,txt);
 41a:	c4 e9       	ldi	r28, 0x94	; 148
 41c:	d0 e0       	ldi	r29, 0x00	; 0
 41e:	be 01       	movw	r22, r28
 420:	0e 94 41 01 	call	0x282	; 0x282 <IntToString>
	lcd_write_txt(txt);
 424:	ce 01       	movw	r24, r28
 426:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_write_txt>
}
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <lcd_write_cmd>:
	lcd_send_pulse_for_update_data_or_cmd();
}


void lcd_write_cmd(uint8_t cmd){
	RS(0); // Rs = 0
 430:	c1 98       	cbi	0x18, 1	; 24
	lcd_write(cmd);
 432:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_write>
}
 436:	08 95       	ret

00000438 <lcd_init>:

#include "lcd.h"
uint8_t txt[5];

void lcd_init(){
	INIT_PORT;
 438:	8a b3       	in	r24, 0x1a	; 26
 43a:	80 6f       	ori	r24, 0xF0	; 240
 43c:	8a bb       	out	0x1a, r24	; 26
 43e:	87 b3       	in	r24, 0x17	; 23
 440:	8e 60       	ori	r24, 0x0E	; 14
 442:	87 bb       	out	0x17, r24	; 23
	Rw(0);
 444:	c2 98       	cbi	0x18, 2	; 24
	lcd_write_cmd(0x2);
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	0e 94 18 02 	call	0x430	; 0x430 <lcd_write_cmd>
	lcd_write_cmd(0x28);  // 4data line
 44c:	88 e2       	ldi	r24, 0x28	; 40
 44e:	0e 94 18 02 	call	0x430	; 0x430 <lcd_write_cmd>
	lcd_write_cmd(0x01);
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	0e 94 18 02 	call	0x430	; 0x430 <lcd_write_cmd>
	lcd_write_cmd(0x0c);  // display on cursor off
 458:	8c e0       	ldi	r24, 0x0C	; 12
 45a:	0e 94 18 02 	call	0x430	; 0x430 <lcd_write_cmd>
	lcd_write_cmd(0x06);  // increment cursor right
 45e:	86 e0       	ldi	r24, 0x06	; 6
 460:	0e 94 18 02 	call	0x430	; 0x430 <lcd_write_cmd>
	lcd_write_cmd(0x80);  // set courser at the beginning of the first line
 464:	80 e8       	ldi	r24, 0x80	; 128
 466:	0e 94 18 02 	call	0x430	; 0x430 <lcd_write_cmd>
 46a:	8f e3       	ldi	r24, 0x3F	; 63
 46c:	9c e9       	ldi	r25, 0x9C	; 156
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <lcd_init+0x36>
 472:	00 c0       	rjmp	.+0      	; 0x474 <lcd_init+0x3c>
 474:	00 00       	nop
	_delay_ms(20);
}
 476:	08 95       	ret

00000478 <PWM1_OCR1A_init>:
 * Created: 4/22/2017 3:02:41 AM
 *  Author: safifi
 */ 
#include"PWM.h"
void PWM1_OCR1A_init(){
	DDRD |= (1<<PIND5);
 478:	8d 9a       	sbi	0x11, 5	; 17
	TCNT1 = 0;
 47a:	1d bc       	out	0x2d, r1	; 45
 47c:	1c bc       	out	0x2c, r1	; 44
	TCCR1A |= ((1<<WGM11)|(1<<WGM10)|(1<<COM1A1)); // fast PWM at OC1A
 47e:	8f b5       	in	r24, 0x2f	; 47
 480:	83 68       	ori	r24, 0x83	; 131
 482:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS10);  // enable PWM with period 1.024/8 = 0.128 usec
 484:	8e b5       	in	r24, 0x2e	; 46
 486:	81 60       	ori	r24, 0x01	; 1
 488:	8e bd       	out	0x2e, r24	; 46
}
 48a:	08 95       	ret

0000048c <PWM1_OCR1A_SET_DUTY>:
void PWM1_OCR1A_SET_DUTY(uint16_t duty){
	OCR1A = (duty*10.23);	
 48c:	bc 01       	movw	r22, r24
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 57 04 	call	0x8ae	; 0x8ae <__floatunsisf>
 496:	24 e1       	ldi	r18, 0x14	; 20
 498:	3e ea       	ldi	r19, 0xAE	; 174
 49a:	43 e2       	ldi	r20, 0x23	; 35
 49c:	51 e4       	ldi	r21, 0x41	; 65
 49e:	0e 94 0b 05 	call	0xa16	; 0xa16 <__mulsf3>
 4a2:	0e 94 2b 04 	call	0x856	; 0x856 <__fixunssfsi>
 4a6:	dc 01       	movw	r26, r24
 4a8:	cb 01       	movw	r24, r22
 4aa:	9b bd       	out	0x2b, r25	; 43
 4ac:	8a bd       	out	0x2a, r24	; 42
}
 4ae:	08 95       	ret

000004b0 <PWM1_OCR1B_SET_DUTY>:
void PWM1_OCR1B_SET_DUTY(uint16_t duty){
	OCR1B = (duty*10.23);	
 4b0:	bc 01       	movw	r22, r24
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 57 04 	call	0x8ae	; 0x8ae <__floatunsisf>
 4ba:	24 e1       	ldi	r18, 0x14	; 20
 4bc:	3e ea       	ldi	r19, 0xAE	; 174
 4be:	43 e2       	ldi	r20, 0x23	; 35
 4c0:	51 e4       	ldi	r21, 0x41	; 65
 4c2:	0e 94 0b 05 	call	0xa16	; 0xa16 <__mulsf3>
 4c6:	0e 94 2b 04 	call	0x856	; 0x856 <__fixunssfsi>
 4ca:	dc 01       	movw	r26, r24
 4cc:	cb 01       	movw	r24, r22
 4ce:	99 bd       	out	0x29, r25	; 41
 4d0:	88 bd       	out	0x28, r24	; 40
}
 4d2:	08 95       	ret

000004d4 <PWM1_OCR1B_init>:
void PWM1_OCR1B_init(){
	DDRD |= (1<<PIND4);
 4d4:	8c 9a       	sbi	0x11, 4	; 17
	TCNT1 = 0;
 4d6:	1d bc       	out	0x2d, r1	; 45
 4d8:	1c bc       	out	0x2c, r1	; 44
	TCCR1A |= ((1<<WGM11)|(1<<WGM10)|(1<<COM1B1)); // fast PWM at OC1B
 4da:	8f b5       	in	r24, 0x2f	; 47
 4dc:	83 62       	ori	r24, 0x23	; 35
 4de:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS10);  // enable PWM with period 1.024/8 = 0.128 usec
 4e0:	8e b5       	in	r24, 0x2e	; 46
 4e2:	81 60       	ori	r24, 0x01	; 1
 4e4:	8e bd       	out	0x2e, r24	; 46
 4e6:	08 95       	ret

000004e8 <timer0_init>:
 */ 
#include"timers.h"
uint64_t t1 = 0;
uint64_t t2 = 0;
void timer0_init(){
	TCCR0 = 0x81;  //
 4e8:	81 e8       	ldi	r24, 0x81	; 129
 4ea:	83 bf       	out	0x33, r24	; 51
	TIMSK = 0x01;  // enable interrupt for OV
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	89 bf       	out	0x39, r24	; 57
	sei();
 4f0:	78 94       	sei
}
 4f2:	08 95       	ret

000004f4 <timer0_init_ocr>:
void timer0_init_ocr(){
	TCCR0 = 0x81 | (1<<WGM01);  // no prescaler
 4f4:	89 e8       	ldi	r24, 0x89	; 137
 4f6:	83 bf       	out	0x33, r24	; 51
	TIMSK = 0x02;  // enable interrupt for ocr
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	89 bf       	out	0x39, r24	; 57
	OCR0 = 250;
 4fc:	8a ef       	ldi	r24, 0xFA	; 250
 4fe:	8c bf       	out	0x3c, r24	; 60
	sei();
 500:	78 94       	sei
}
 502:	08 95       	ret

00000504 <timer2_init_oc2>:
void timer2_init_oc2(){
	TCCR2 = (1<<FOC2)|(1<<WGM21) | (1<<COM20)|(1<<CS22)|(1<<CS21)|(1<<CS20);  // 
 504:	8f e9       	ldi	r24, 0x9F	; 159
 506:	85 bd       	out	0x25, r24	; 37
	OCR2 = 250; // 250*1024
 508:	8a ef       	ldi	r24, 0xFA	; 250
 50a:	83 bd       	out	0x23, r24	; 35
//	sei();
}
 50c:	08 95       	ret

0000050e <timer0_ms>:

uint64_t timer0_ms(){
	return ( t1 * 0.032);  // 8 MHZ crystal ==>   256 / 8 * 10^-3 
 50e:	20 91 8c 00 	lds	r18, 0x008C
 512:	30 91 8d 00 	lds	r19, 0x008D
 516:	40 91 8e 00 	lds	r20, 0x008E
 51a:	50 91 8f 00 	lds	r21, 0x008F
 51e:	60 91 90 00 	lds	r22, 0x0090
 522:	70 91 91 00 	lds	r23, 0x0091
 526:	80 91 92 00 	lds	r24, 0x0092
 52a:	90 91 93 00 	lds	r25, 0x0093
 52e:	0e 94 94 04 	call	0x928	; 0x928 <__floatundisf>
 532:	2f e6       	ldi	r18, 0x6F	; 111
 534:	32 e1       	ldi	r19, 0x12	; 18
 536:	43 e0       	ldi	r20, 0x03	; 3
 538:	5d e3       	ldi	r21, 0x3D	; 61
 53a:	0e 94 0b 05 	call	0xa16	; 0xa16 <__mulsf3>
 53e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__fixunssfdi>
}
 542:	08 95       	ret

00000544 <timer0_ms_ocr>:
uint64_t timer0_ms_ocr(){
	return ( t2 * 0.03125);  // 8 MHZ crystal ==>   250 / 8 * 10^-3
 544:	20 91 84 00 	lds	r18, 0x0084
 548:	30 91 85 00 	lds	r19, 0x0085
 54c:	40 91 86 00 	lds	r20, 0x0086
 550:	50 91 87 00 	lds	r21, 0x0087
 554:	60 91 88 00 	lds	r22, 0x0088
 558:	70 91 89 00 	lds	r23, 0x0089
 55c:	80 91 8a 00 	lds	r24, 0x008A
 560:	90 91 8b 00 	lds	r25, 0x008B
 564:	0e 94 94 04 	call	0x928	; 0x928 <__floatundisf>
 568:	20 e0       	ldi	r18, 0x00	; 0
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	40 e0       	ldi	r20, 0x00	; 0
 56e:	5d e3       	ldi	r21, 0x3D	; 61
 570:	0e 94 0b 05 	call	0xa16	; 0xa16 <__mulsf3>
 574:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__fixunssfdi>
}
 578:	08 95       	ret

0000057a <__vector_11>:
#define TOGBIT(REG,BIT)  (REG ^= 1 << BIT)

ISR (TIMER0_OVF_vect){
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	2f 93       	push	r18
 586:	3f 93       	push	r19
 588:	4f 93       	push	r20
 58a:	5f 93       	push	r21
 58c:	6f 93       	push	r22
 58e:	7f 93       	push	r23
 590:	8f 93       	push	r24
 592:	9f 93       	push	r25
 594:	af 93       	push	r26
 596:	ef 93       	push	r30
 598:	ff 93       	push	r31
	t1++;
 59a:	50 91 8c 00 	lds	r21, 0x008C
 59e:	40 91 8d 00 	lds	r20, 0x008D
 5a2:	30 91 8e 00 	lds	r19, 0x008E
 5a6:	20 91 8f 00 	lds	r18, 0x008F
 5aa:	90 91 90 00 	lds	r25, 0x0090
 5ae:	f0 91 91 00 	lds	r31, 0x0091
 5b2:	e0 91 92 00 	lds	r30, 0x0092
 5b6:	a0 91 93 00 	lds	r26, 0x0093
 5ba:	75 2f       	mov	r23, r21
 5bc:	7f 5f       	subi	r23, 0xFF	; 255
 5be:	61 e0       	ldi	r22, 0x01	; 1
 5c0:	75 17       	cp	r23, r21
 5c2:	08 f0       	brcs	.+2      	; 0x5c6 <__vector_11+0x4c>
 5c4:	60 e0       	ldi	r22, 0x00	; 0
 5c6:	84 2f       	mov	r24, r20
 5c8:	50 e0       	ldi	r21, 0x00	; 0
 5ca:	64 0f       	add	r22, r20
 5cc:	41 e0       	ldi	r20, 0x01	; 1
 5ce:	68 17       	cp	r22, r24
 5d0:	08 f0       	brcs	.+2      	; 0x5d4 <__vector_11+0x5a>
 5d2:	40 e0       	ldi	r20, 0x00	; 0
 5d4:	54 2b       	or	r21, r20
 5d6:	83 2f       	mov	r24, r19
 5d8:	40 e0       	ldi	r20, 0x00	; 0
 5da:	53 0f       	add	r21, r19
 5dc:	31 e0       	ldi	r19, 0x01	; 1
 5de:	58 17       	cp	r21, r24
 5e0:	08 f0       	brcs	.+2      	; 0x5e4 <__vector_11+0x6a>
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	43 2b       	or	r20, r19
 5e6:	82 2f       	mov	r24, r18
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	42 0f       	add	r20, r18
 5ec:	21 e0       	ldi	r18, 0x01	; 1
 5ee:	48 17       	cp	r20, r24
 5f0:	08 f0       	brcs	.+2      	; 0x5f4 <__vector_11+0x7a>
 5f2:	20 e0       	ldi	r18, 0x00	; 0
 5f4:	32 2b       	or	r19, r18
 5f6:	89 2f       	mov	r24, r25
 5f8:	20 e0       	ldi	r18, 0x00	; 0
 5fa:	39 0f       	add	r19, r25
 5fc:	91 e0       	ldi	r25, 0x01	; 1
 5fe:	38 17       	cp	r19, r24
 600:	08 f0       	brcs	.+2      	; 0x604 <__vector_11+0x8a>
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	29 2b       	or	r18, r25
 606:	8f 2f       	mov	r24, r31
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	2f 0f       	add	r18, r31
 60c:	f1 e0       	ldi	r31, 0x01	; 1
 60e:	28 17       	cp	r18, r24
 610:	08 f0       	brcs	.+2      	; 0x614 <__vector_11+0x9a>
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	9f 2b       	or	r25, r31
 616:	fe 2f       	mov	r31, r30
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	9e 0f       	add	r25, r30
 61c:	e1 e0       	ldi	r30, 0x01	; 1
 61e:	9f 17       	cp	r25, r31
 620:	08 f0       	brcs	.+2      	; 0x624 <__vector_11+0xaa>
 622:	e0 e0       	ldi	r30, 0x00	; 0
 624:	8e 2b       	or	r24, r30
 626:	8a 0f       	add	r24, r26
 628:	70 93 8c 00 	sts	0x008C, r23
 62c:	60 93 8d 00 	sts	0x008D, r22
 630:	50 93 8e 00 	sts	0x008E, r21
 634:	40 93 8f 00 	sts	0x008F, r20
 638:	30 93 90 00 	sts	0x0090, r19
 63c:	20 93 91 00 	sts	0x0091, r18
 640:	90 93 92 00 	sts	0x0092, r25
 644:	80 93 93 00 	sts	0x0093, r24
}
 648:	ff 91       	pop	r31
 64a:	ef 91       	pop	r30
 64c:	af 91       	pop	r26
 64e:	9f 91       	pop	r25
 650:	8f 91       	pop	r24
 652:	7f 91       	pop	r23
 654:	6f 91       	pop	r22
 656:	5f 91       	pop	r21
 658:	4f 91       	pop	r20
 65a:	3f 91       	pop	r19
 65c:	2f 91       	pop	r18
 65e:	0f 90       	pop	r0
 660:	0f be       	out	0x3f, r0	; 63
 662:	0f 90       	pop	r0
 664:	1f 90       	pop	r1
 666:	18 95       	reti

00000668 <__vector_10>:

ISR(TIMER0_COMP_vect) {
 668:	1f 92       	push	r1
 66a:	0f 92       	push	r0
 66c:	0f b6       	in	r0, 0x3f	; 63
 66e:	0f 92       	push	r0
 670:	11 24       	eor	r1, r1
 672:	2f 93       	push	r18
 674:	3f 93       	push	r19
 676:	4f 93       	push	r20
 678:	5f 93       	push	r21
 67a:	6f 93       	push	r22
 67c:	7f 93       	push	r23
 67e:	8f 93       	push	r24
 680:	9f 93       	push	r25
 682:	af 93       	push	r26
 684:	ef 93       	push	r30
 686:	ff 93       	push	r31
	t2++;
 688:	50 91 84 00 	lds	r21, 0x0084
 68c:	40 91 85 00 	lds	r20, 0x0085
 690:	30 91 86 00 	lds	r19, 0x0086
 694:	20 91 87 00 	lds	r18, 0x0087
 698:	90 91 88 00 	lds	r25, 0x0088
 69c:	f0 91 89 00 	lds	r31, 0x0089
 6a0:	e0 91 8a 00 	lds	r30, 0x008A
 6a4:	a0 91 8b 00 	lds	r26, 0x008B
 6a8:	75 2f       	mov	r23, r21
 6aa:	7f 5f       	subi	r23, 0xFF	; 255
 6ac:	61 e0       	ldi	r22, 0x01	; 1
 6ae:	75 17       	cp	r23, r21
 6b0:	08 f0       	brcs	.+2      	; 0x6b4 <__vector_10+0x4c>
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	84 2f       	mov	r24, r20
 6b6:	50 e0       	ldi	r21, 0x00	; 0
 6b8:	64 0f       	add	r22, r20
 6ba:	41 e0       	ldi	r20, 0x01	; 1
 6bc:	68 17       	cp	r22, r24
 6be:	08 f0       	brcs	.+2      	; 0x6c2 <__vector_10+0x5a>
 6c0:	40 e0       	ldi	r20, 0x00	; 0
 6c2:	54 2b       	or	r21, r20
 6c4:	83 2f       	mov	r24, r19
 6c6:	40 e0       	ldi	r20, 0x00	; 0
 6c8:	53 0f       	add	r21, r19
 6ca:	31 e0       	ldi	r19, 0x01	; 1
 6cc:	58 17       	cp	r21, r24
 6ce:	08 f0       	brcs	.+2      	; 0x6d2 <__vector_10+0x6a>
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	43 2b       	or	r20, r19
 6d4:	82 2f       	mov	r24, r18
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	42 0f       	add	r20, r18
 6da:	21 e0       	ldi	r18, 0x01	; 1
 6dc:	48 17       	cp	r20, r24
 6de:	08 f0       	brcs	.+2      	; 0x6e2 <__vector_10+0x7a>
 6e0:	20 e0       	ldi	r18, 0x00	; 0
 6e2:	32 2b       	or	r19, r18
 6e4:	89 2f       	mov	r24, r25
 6e6:	20 e0       	ldi	r18, 0x00	; 0
 6e8:	39 0f       	add	r19, r25
 6ea:	91 e0       	ldi	r25, 0x01	; 1
 6ec:	38 17       	cp	r19, r24
 6ee:	08 f0       	brcs	.+2      	; 0x6f2 <__vector_10+0x8a>
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	29 2b       	or	r18, r25
 6f4:	8f 2f       	mov	r24, r31
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	2f 0f       	add	r18, r31
 6fa:	f1 e0       	ldi	r31, 0x01	; 1
 6fc:	28 17       	cp	r18, r24
 6fe:	08 f0       	brcs	.+2      	; 0x702 <__vector_10+0x9a>
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	9f 2b       	or	r25, r31
 704:	fe 2f       	mov	r31, r30
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	9e 0f       	add	r25, r30
 70a:	e1 e0       	ldi	r30, 0x01	; 1
 70c:	9f 17       	cp	r25, r31
 70e:	08 f0       	brcs	.+2      	; 0x712 <__vector_10+0xaa>
 710:	e0 e0       	ldi	r30, 0x00	; 0
 712:	8e 2b       	or	r24, r30
 714:	8a 0f       	add	r24, r26
 716:	70 93 84 00 	sts	0x0084, r23
 71a:	60 93 85 00 	sts	0x0085, r22
 71e:	50 93 86 00 	sts	0x0086, r21
 722:	40 93 87 00 	sts	0x0087, r20
 726:	30 93 88 00 	sts	0x0088, r19
 72a:	20 93 89 00 	sts	0x0089, r18
 72e:	90 93 8a 00 	sts	0x008A, r25
 732:	80 93 8b 00 	sts	0x008B, r24
}
 736:	ff 91       	pop	r31
 738:	ef 91       	pop	r30
 73a:	af 91       	pop	r26
 73c:	9f 91       	pop	r25
 73e:	8f 91       	pop	r24
 740:	7f 91       	pop	r23
 742:	6f 91       	pop	r22
 744:	5f 91       	pop	r21
 746:	4f 91       	pop	r20
 748:	3f 91       	pop	r19
 74a:	2f 91       	pop	r18
 74c:	0f 90       	pop	r0
 74e:	0f be       	out	0x3f, r0	; 63
 750:	0f 90       	pop	r0
 752:	1f 90       	pop	r1
 754:	18 95       	reti

00000756 <Uart_init>:


#include "UART.h"
void Uart_init(uint16_t baud_rate){
	// baud rate
	uint16_t ubr = ((F_CPU)/(baud_rate*16UL)-1);
 756:	a0 e0       	ldi	r26, 0x00	; 0
 758:	b0 e0       	ldi	r27, 0x00	; 0
 75a:	88 0f       	add	r24, r24
 75c:	99 1f       	adc	r25, r25
 75e:	aa 1f       	adc	r26, r26
 760:	bb 1f       	adc	r27, r27
 762:	88 0f       	add	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	aa 1f       	adc	r26, r26
 768:	bb 1f       	adc	r27, r27
 76a:	9c 01       	movw	r18, r24
 76c:	ad 01       	movw	r20, r26
 76e:	22 0f       	add	r18, r18
 770:	33 1f       	adc	r19, r19
 772:	44 1f       	adc	r20, r20
 774:	55 1f       	adc	r21, r21
 776:	22 0f       	add	r18, r18
 778:	33 1f       	adc	r19, r19
 77a:	44 1f       	adc	r20, r20
 77c:	55 1f       	adc	r21, r21
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	72 e1       	ldi	r23, 0x12	; 18
 782:	8a e7       	ldi	r24, 0x7A	; 122
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	0e 94 aa 05 	call	0xb54	; 0xb54 <__udivmodsi4>
 78a:	21 50       	subi	r18, 0x01	; 1
 78c:	30 40       	sbci	r19, 0x00	; 0
	UBRRL = (uint8_t)ubr;
 78e:	29 b9       	out	0x09, r18	; 9
	UBRRH = (uint8_t)(ubr >> 8);
 790:	30 bd       	out	0x20, r19	; 32

	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
 792:	88 e1       	ldi	r24, 0x18	; 24
 794:	8a b9       	out	0x0a, r24	; 10
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 796:	86 e8       	ldi	r24, 0x86	; 134
 798:	80 bd       	out	0x20, r24	; 32
}
 79a:	08 95       	ret

0000079c <Uart_Write>:

void Uart_Write(uint8_t data){
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );  // check trans
 79c:	5d 9b       	sbis	0x0b, 5	; 11
 79e:	fe cf       	rjmp	.-4      	; 0x79c <Uart_Write>
	UDR = data;
 7a0:	8c b9       	out	0x0c, r24	; 12
}
 7a2:	08 95       	ret

000007a4 <Uart_Write_string>:

void Uart_Write_string(uint8_t *data){
 7a4:	0f 93       	push	r16
 7a6:	1f 93       	push	r17
 7a8:	cf 93       	push	r28
 7aa:	8c 01       	movw	r16, r24
	for(uint8_t i = 0; data[i] != '\0'; i++)
 7ac:	fc 01       	movw	r30, r24
 7ae:	80 81       	ld	r24, Z
 7b0:	88 23       	and	r24, r24
 7b2:	51 f0       	breq	.+20     	; 0x7c8 <Uart_Write_string+0x24>
 7b4:	c0 e0       	ldi	r28, 0x00	; 0
		Uart_Write(data[i]);
 7b6:	0e 94 ce 03 	call	0x79c	; 0x79c <Uart_Write>
	while ( !( UCSRA & (1<<UDRE)) );  // check trans
	UDR = data;
}

void Uart_Write_string(uint8_t *data){
	for(uint8_t i = 0; data[i] != '\0'; i++)
 7ba:	cf 5f       	subi	r28, 0xFF	; 255
 7bc:	f8 01       	movw	r30, r16
 7be:	ec 0f       	add	r30, r28
 7c0:	f1 1d       	adc	r31, r1
 7c2:	80 81       	ld	r24, Z
 7c4:	88 23       	and	r24, r24
 7c6:	b9 f7       	brne	.-18     	; 0x7b6 <Uart_Write_string+0x12>
		Uart_Write(data[i]);
}
 7c8:	cf 91       	pop	r28
 7ca:	1f 91       	pop	r17
 7cc:	0f 91       	pop	r16
 7ce:	08 95       	ret

000007d0 <Uart_Read>:

uint8_t Uart_Read(){
	while ( !(UCSRA & (1<<RXC)) );
 7d0:	5f 9b       	sbis	0x0b, 7	; 11
 7d2:	fe cf       	rjmp	.-4      	; 0x7d0 <Uart_Read>
	return UDR;
 7d4:	8c b1       	in	r24, 0x0c	; 12
}
 7d6:	08 95       	ret

000007d8 <Uart_available>:

uint8_t Uart_available(){
    if( (UCSRA & (1<<RXC)) ){
 7d8:	8b b1       	in	r24, 0x0b	; 11
		return 1;
	}
	return 0;
 7da:	88 1f       	adc	r24, r24
 7dc:	88 27       	eor	r24, r24
 7de:	88 1f       	adc	r24, r24
 7e0:	08 95       	ret

000007e2 <__fixsfdi>:
 7e2:	be e3       	ldi	r27, 0x3E	; 62
 7e4:	04 d0       	rcall	.+8      	; 0x7ee <__fixunssfdi+0x2>
 7e6:	08 f4       	brcc	.+2      	; 0x7ea <__fixsfdi+0x8>
 7e8:	90 e8       	ldi	r25, 0x80	; 128
 7ea:	08 95       	ret

000007ec <__fixunssfdi>:
 7ec:	bf e3       	ldi	r27, 0x3F	; 63
 7ee:	22 27       	eor	r18, r18
 7f0:	33 27       	eor	r19, r19
 7f2:	a9 01       	movw	r20, r18
 7f4:	ef d0       	rcall	.+478    	; 0x9d4 <__fp_splitA>
 7f6:	58 f1       	brcs	.+86     	; 0x84e <__fixunssfdi+0x62>
 7f8:	9f 57       	subi	r25, 0x7F	; 127
 7fa:	40 f1       	brcs	.+80     	; 0x84c <__fixunssfdi+0x60>
 7fc:	b9 17       	cp	r27, r25
 7fe:	38 f1       	brcs	.+78     	; 0x84e <__fixunssfdi+0x62>
 800:	bf e3       	ldi	r27, 0x3F	; 63
 802:	b9 1b       	sub	r27, r25
 804:	99 27       	eor	r25, r25
 806:	b8 50       	subi	r27, 0x08	; 8
 808:	3a f4       	brpl	.+14     	; 0x818 <__fixunssfdi+0x2c>
 80a:	66 0f       	add	r22, r22
 80c:	77 1f       	adc	r23, r23
 80e:	88 1f       	adc	r24, r24
 810:	99 1f       	adc	r25, r25
 812:	b3 95       	inc	r27
 814:	d2 f3       	brmi	.-12     	; 0x80a <__fixunssfdi+0x1e>
 816:	16 c0       	rjmp	.+44     	; 0x844 <__fixunssfdi+0x58>
 818:	b8 50       	subi	r27, 0x08	; 8
 81a:	4a f0       	brmi	.+18     	; 0x82e <__fixunssfdi+0x42>
 81c:	23 2f       	mov	r18, r19
 81e:	34 2f       	mov	r19, r20
 820:	45 2f       	mov	r20, r21
 822:	56 2f       	mov	r21, r22
 824:	67 2f       	mov	r22, r23
 826:	78 2f       	mov	r23, r24
 828:	88 27       	eor	r24, r24
 82a:	b8 50       	subi	r27, 0x08	; 8
 82c:	ba f7       	brpl	.-18     	; 0x81c <__fixunssfdi+0x30>
 82e:	b8 5f       	subi	r27, 0xF8	; 248
 830:	49 f0       	breq	.+18     	; 0x844 <__fixunssfdi+0x58>
 832:	86 95       	lsr	r24
 834:	77 95       	ror	r23
 836:	67 95       	ror	r22
 838:	57 95       	ror	r21
 83a:	47 95       	ror	r20
 83c:	37 95       	ror	r19
 83e:	27 95       	ror	r18
 840:	ba 95       	dec	r27
 842:	b9 f7       	brne	.-18     	; 0x832 <__fixunssfdi+0x46>
 844:	0e f4       	brtc	.+2      	; 0x848 <__fixunssfdi+0x5c>
 846:	ae d0       	rcall	.+348    	; 0x9a4 <__fp_negdi>
 848:	88 94       	clc
 84a:	08 95       	ret
 84c:	88 94       	clc
 84e:	60 e0       	ldi	r22, 0x00	; 0
 850:	70 e0       	ldi	r23, 0x00	; 0
 852:	cb 01       	movw	r24, r22
 854:	08 95       	ret

00000856 <__fixunssfsi>:
 856:	be d0       	rcall	.+380    	; 0x9d4 <__fp_splitA>
 858:	88 f0       	brcs	.+34     	; 0x87c <__stack+0x1d>
 85a:	9f 57       	subi	r25, 0x7F	; 127
 85c:	90 f0       	brcs	.+36     	; 0x882 <__stack+0x23>
 85e:	b9 2f       	mov	r27, r25
 860:	99 27       	eor	r25, r25
 862:	b7 51       	subi	r27, 0x17	; 23
 864:	a0 f0       	brcs	.+40     	; 0x88e <__stack+0x2f>
 866:	d1 f0       	breq	.+52     	; 0x89c <__stack+0x3d>
 868:	66 0f       	add	r22, r22
 86a:	77 1f       	adc	r23, r23
 86c:	88 1f       	adc	r24, r24
 86e:	99 1f       	adc	r25, r25
 870:	1a f0       	brmi	.+6      	; 0x878 <__stack+0x19>
 872:	ba 95       	dec	r27
 874:	c9 f7       	brne	.-14     	; 0x868 <__stack+0x9>
 876:	12 c0       	rjmp	.+36     	; 0x89c <__stack+0x3d>
 878:	b1 30       	cpi	r27, 0x01	; 1
 87a:	81 f0       	breq	.+32     	; 0x89c <__stack+0x3d>
 87c:	c5 d0       	rcall	.+394    	; 0xa08 <__fp_zero>
 87e:	b1 e0       	ldi	r27, 0x01	; 1
 880:	08 95       	ret
 882:	c2 c0       	rjmp	.+388    	; 0xa08 <__fp_zero>
 884:	67 2f       	mov	r22, r23
 886:	78 2f       	mov	r23, r24
 888:	88 27       	eor	r24, r24
 88a:	b8 5f       	subi	r27, 0xF8	; 248
 88c:	39 f0       	breq	.+14     	; 0x89c <__stack+0x3d>
 88e:	b9 3f       	cpi	r27, 0xF9	; 249
 890:	cc f3       	brlt	.-14     	; 0x884 <__stack+0x25>
 892:	86 95       	lsr	r24
 894:	77 95       	ror	r23
 896:	67 95       	ror	r22
 898:	b3 95       	inc	r27
 89a:	d9 f7       	brne	.-10     	; 0x892 <__stack+0x33>
 89c:	3e f4       	brtc	.+14     	; 0x8ac <__stack+0x4d>
 89e:	90 95       	com	r25
 8a0:	80 95       	com	r24
 8a2:	70 95       	com	r23
 8a4:	61 95       	neg	r22
 8a6:	7f 4f       	sbci	r23, 0xFF	; 255
 8a8:	8f 4f       	sbci	r24, 0xFF	; 255
 8aa:	9f 4f       	sbci	r25, 0xFF	; 255
 8ac:	08 95       	ret

000008ae <__floatunsisf>:
 8ae:	e8 94       	clt
 8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <__floatsisf+0x12>

000008b2 <__floatsisf>:
 8b2:	97 fb       	bst	r25, 7
 8b4:	3e f4       	brtc	.+14     	; 0x8c4 <__floatsisf+0x12>
 8b6:	90 95       	com	r25
 8b8:	80 95       	com	r24
 8ba:	70 95       	com	r23
 8bc:	61 95       	neg	r22
 8be:	7f 4f       	sbci	r23, 0xFF	; 255
 8c0:	8f 4f       	sbci	r24, 0xFF	; 255
 8c2:	9f 4f       	sbci	r25, 0xFF	; 255
 8c4:	99 23       	and	r25, r25
 8c6:	a9 f0       	breq	.+42     	; 0x8f2 <__floatsisf+0x40>
 8c8:	f9 2f       	mov	r31, r25
 8ca:	96 e9       	ldi	r25, 0x96	; 150
 8cc:	bb 27       	eor	r27, r27
 8ce:	93 95       	inc	r25
 8d0:	f6 95       	lsr	r31
 8d2:	87 95       	ror	r24
 8d4:	77 95       	ror	r23
 8d6:	67 95       	ror	r22
 8d8:	b7 95       	ror	r27
 8da:	f1 11       	cpse	r31, r1
 8dc:	f8 cf       	rjmp	.-16     	; 0x8ce <__floatsisf+0x1c>
 8de:	fa f4       	brpl	.+62     	; 0x91e <__floatsisf+0x6c>
 8e0:	bb 0f       	add	r27, r27
 8e2:	11 f4       	brne	.+4      	; 0x8e8 <__floatsisf+0x36>
 8e4:	60 ff       	sbrs	r22, 0
 8e6:	1b c0       	rjmp	.+54     	; 0x91e <__floatsisf+0x6c>
 8e8:	6f 5f       	subi	r22, 0xFF	; 255
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	8f 4f       	sbci	r24, 0xFF	; 255
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	16 c0       	rjmp	.+44     	; 0x91e <__floatsisf+0x6c>
 8f2:	88 23       	and	r24, r24
 8f4:	11 f0       	breq	.+4      	; 0x8fa <__floatsisf+0x48>
 8f6:	96 e9       	ldi	r25, 0x96	; 150
 8f8:	11 c0       	rjmp	.+34     	; 0x91c <__floatsisf+0x6a>
 8fa:	77 23       	and	r23, r23
 8fc:	21 f0       	breq	.+8      	; 0x906 <__floatsisf+0x54>
 8fe:	9e e8       	ldi	r25, 0x8E	; 142
 900:	87 2f       	mov	r24, r23
 902:	76 2f       	mov	r23, r22
 904:	05 c0       	rjmp	.+10     	; 0x910 <__floatsisf+0x5e>
 906:	66 23       	and	r22, r22
 908:	71 f0       	breq	.+28     	; 0x926 <__floatsisf+0x74>
 90a:	96 e8       	ldi	r25, 0x86	; 134
 90c:	86 2f       	mov	r24, r22
 90e:	70 e0       	ldi	r23, 0x00	; 0
 910:	60 e0       	ldi	r22, 0x00	; 0
 912:	2a f0       	brmi	.+10     	; 0x91e <__floatsisf+0x6c>
 914:	9a 95       	dec	r25
 916:	66 0f       	add	r22, r22
 918:	77 1f       	adc	r23, r23
 91a:	88 1f       	adc	r24, r24
 91c:	da f7       	brpl	.-10     	; 0x914 <__floatsisf+0x62>
 91e:	88 0f       	add	r24, r24
 920:	96 95       	lsr	r25
 922:	87 95       	ror	r24
 924:	97 f9       	bld	r25, 7
 926:	08 95       	ret

00000928 <__floatundisf>:
 928:	e8 94       	clt

0000092a <__fp_di2sf>:
 92a:	f9 2f       	mov	r31, r25
 92c:	96 eb       	ldi	r25, 0xB6	; 182
 92e:	ff 23       	and	r31, r31
 930:	81 f0       	breq	.+32     	; 0x952 <__fp_di2sf+0x28>
 932:	12 16       	cp	r1, r18
 934:	13 06       	cpc	r1, r19
 936:	14 06       	cpc	r1, r20
 938:	44 0b       	sbc	r20, r20
 93a:	93 95       	inc	r25
 93c:	f6 95       	lsr	r31
 93e:	87 95       	ror	r24
 940:	77 95       	ror	r23
 942:	67 95       	ror	r22
 944:	57 95       	ror	r21
 946:	40 40       	sbci	r20, 0x00	; 0
 948:	ff 23       	and	r31, r31
 94a:	b9 f7       	brne	.-18     	; 0x93a <__fp_di2sf+0x10>
 94c:	1b c0       	rjmp	.+54     	; 0x984 <__fp_di2sf+0x5a>
 94e:	99 27       	eor	r25, r25
 950:	08 95       	ret
 952:	88 23       	and	r24, r24
 954:	51 f4       	brne	.+20     	; 0x96a <__fp_di2sf+0x40>
 956:	98 50       	subi	r25, 0x08	; 8
 958:	d2 f7       	brpl	.-12     	; 0x94e <__fp_di2sf+0x24>
 95a:	87 2b       	or	r24, r23
 95c:	76 2f       	mov	r23, r22
 95e:	65 2f       	mov	r22, r21
 960:	54 2f       	mov	r21, r20
 962:	43 2f       	mov	r20, r19
 964:	32 2f       	mov	r19, r18
 966:	20 e0       	ldi	r18, 0x00	; 0
 968:	b1 f3       	breq	.-20     	; 0x956 <__fp_di2sf+0x2c>
 96a:	12 16       	cp	r1, r18
 96c:	13 06       	cpc	r1, r19
 96e:	14 06       	cpc	r1, r20
 970:	44 0b       	sbc	r20, r20
 972:	88 23       	and	r24, r24
 974:	3a f0       	brmi	.+14     	; 0x984 <__fp_di2sf+0x5a>
 976:	9a 95       	dec	r25
 978:	44 0f       	add	r20, r20
 97a:	55 1f       	adc	r21, r21
 97c:	66 1f       	adc	r22, r22
 97e:	77 1f       	adc	r23, r23
 980:	88 1f       	adc	r24, r24
 982:	ca f7       	brpl	.-14     	; 0x976 <__fp_di2sf+0x4c>
 984:	55 23       	and	r21, r21
 986:	4a f4       	brpl	.+18     	; 0x99a <__fp_di2sf+0x70>
 988:	44 0f       	add	r20, r20
 98a:	55 1f       	adc	r21, r21
 98c:	11 f4       	brne	.+4      	; 0x992 <__fp_di2sf+0x68>
 98e:	60 ff       	sbrs	r22, 0
 990:	04 c0       	rjmp	.+8      	; 0x99a <__fp_di2sf+0x70>
 992:	6f 5f       	subi	r22, 0xFF	; 255
 994:	7f 4f       	sbci	r23, 0xFF	; 255
 996:	8f 4f       	sbci	r24, 0xFF	; 255
 998:	9f 4f       	sbci	r25, 0xFF	; 255
 99a:	88 0f       	add	r24, r24
 99c:	96 95       	lsr	r25
 99e:	87 95       	ror	r24
 9a0:	97 f9       	bld	r25, 7
 9a2:	08 95       	ret

000009a4 <__fp_negdi>:
 9a4:	90 95       	com	r25
 9a6:	80 95       	com	r24
 9a8:	70 95       	com	r23
 9aa:	60 95       	com	r22
 9ac:	50 95       	com	r21
 9ae:	40 95       	com	r20
 9b0:	30 95       	com	r19
 9b2:	21 95       	neg	r18
 9b4:	3f 4f       	sbci	r19, 0xFF	; 255
 9b6:	4f 4f       	sbci	r20, 0xFF	; 255
 9b8:	5f 4f       	sbci	r21, 0xFF	; 255
 9ba:	6f 4f       	sbci	r22, 0xFF	; 255
 9bc:	7f 4f       	sbci	r23, 0xFF	; 255
 9be:	8f 4f       	sbci	r24, 0xFF	; 255
 9c0:	9f 4f       	sbci	r25, 0xFF	; 255
 9c2:	08 95       	ret

000009c4 <__fp_split3>:
 9c4:	57 fd       	sbrc	r21, 7
 9c6:	90 58       	subi	r25, 0x80	; 128
 9c8:	44 0f       	add	r20, r20
 9ca:	55 1f       	adc	r21, r21
 9cc:	59 f0       	breq	.+22     	; 0x9e4 <__fp_splitA+0x10>
 9ce:	5f 3f       	cpi	r21, 0xFF	; 255
 9d0:	71 f0       	breq	.+28     	; 0x9ee <__fp_splitA+0x1a>
 9d2:	47 95       	ror	r20

000009d4 <__fp_splitA>:
 9d4:	88 0f       	add	r24, r24
 9d6:	97 fb       	bst	r25, 7
 9d8:	99 1f       	adc	r25, r25
 9da:	61 f0       	breq	.+24     	; 0x9f4 <__fp_splitA+0x20>
 9dc:	9f 3f       	cpi	r25, 0xFF	; 255
 9de:	79 f0       	breq	.+30     	; 0x9fe <__fp_splitA+0x2a>
 9e0:	87 95       	ror	r24
 9e2:	08 95       	ret
 9e4:	12 16       	cp	r1, r18
 9e6:	13 06       	cpc	r1, r19
 9e8:	14 06       	cpc	r1, r20
 9ea:	55 1f       	adc	r21, r21
 9ec:	f2 cf       	rjmp	.-28     	; 0x9d2 <__fp_split3+0xe>
 9ee:	46 95       	lsr	r20
 9f0:	f1 df       	rcall	.-30     	; 0x9d4 <__fp_splitA>
 9f2:	08 c0       	rjmp	.+16     	; 0xa04 <__fp_splitA+0x30>
 9f4:	16 16       	cp	r1, r22
 9f6:	17 06       	cpc	r1, r23
 9f8:	18 06       	cpc	r1, r24
 9fa:	99 1f       	adc	r25, r25
 9fc:	f1 cf       	rjmp	.-30     	; 0x9e0 <__fp_splitA+0xc>
 9fe:	86 95       	lsr	r24
 a00:	71 05       	cpc	r23, r1
 a02:	61 05       	cpc	r22, r1
 a04:	08 94       	sec
 a06:	08 95       	ret

00000a08 <__fp_zero>:
 a08:	e8 94       	clt

00000a0a <__fp_szero>:
 a0a:	bb 27       	eor	r27, r27
 a0c:	66 27       	eor	r22, r22
 a0e:	77 27       	eor	r23, r23
 a10:	cb 01       	movw	r24, r22
 a12:	97 f9       	bld	r25, 7
 a14:	08 95       	ret

00000a16 <__mulsf3>:
 a16:	0b d0       	rcall	.+22     	; 0xa2e <__mulsf3x>
 a18:	78 c0       	rjmp	.+240    	; 0xb0a <__fp_round>
 a1a:	69 d0       	rcall	.+210    	; 0xaee <__fp_pscA>
 a1c:	28 f0       	brcs	.+10     	; 0xa28 <__mulsf3+0x12>
 a1e:	6e d0       	rcall	.+220    	; 0xafc <__fp_pscB>
 a20:	18 f0       	brcs	.+6      	; 0xa28 <__mulsf3+0x12>
 a22:	95 23       	and	r25, r21
 a24:	09 f0       	breq	.+2      	; 0xa28 <__mulsf3+0x12>
 a26:	5a c0       	rjmp	.+180    	; 0xadc <__fp_inf>
 a28:	5f c0       	rjmp	.+190    	; 0xae8 <__fp_nan>
 a2a:	11 24       	eor	r1, r1
 a2c:	ee cf       	rjmp	.-36     	; 0xa0a <__fp_szero>

00000a2e <__mulsf3x>:
 a2e:	ca df       	rcall	.-108    	; 0x9c4 <__fp_split3>
 a30:	a0 f3       	brcs	.-24     	; 0xa1a <__mulsf3+0x4>

00000a32 <__mulsf3_pse>:
 a32:	95 9f       	mul	r25, r21
 a34:	d1 f3       	breq	.-12     	; 0xa2a <__mulsf3+0x14>
 a36:	95 0f       	add	r25, r21
 a38:	50 e0       	ldi	r21, 0x00	; 0
 a3a:	55 1f       	adc	r21, r21
 a3c:	62 9f       	mul	r22, r18
 a3e:	f0 01       	movw	r30, r0
 a40:	72 9f       	mul	r23, r18
 a42:	bb 27       	eor	r27, r27
 a44:	f0 0d       	add	r31, r0
 a46:	b1 1d       	adc	r27, r1
 a48:	63 9f       	mul	r22, r19
 a4a:	aa 27       	eor	r26, r26
 a4c:	f0 0d       	add	r31, r0
 a4e:	b1 1d       	adc	r27, r1
 a50:	aa 1f       	adc	r26, r26
 a52:	64 9f       	mul	r22, r20
 a54:	66 27       	eor	r22, r22
 a56:	b0 0d       	add	r27, r0
 a58:	a1 1d       	adc	r26, r1
 a5a:	66 1f       	adc	r22, r22
 a5c:	82 9f       	mul	r24, r18
 a5e:	22 27       	eor	r18, r18
 a60:	b0 0d       	add	r27, r0
 a62:	a1 1d       	adc	r26, r1
 a64:	62 1f       	adc	r22, r18
 a66:	73 9f       	mul	r23, r19
 a68:	b0 0d       	add	r27, r0
 a6a:	a1 1d       	adc	r26, r1
 a6c:	62 1f       	adc	r22, r18
 a6e:	83 9f       	mul	r24, r19
 a70:	a0 0d       	add	r26, r0
 a72:	61 1d       	adc	r22, r1
 a74:	22 1f       	adc	r18, r18
 a76:	74 9f       	mul	r23, r20
 a78:	33 27       	eor	r19, r19
 a7a:	a0 0d       	add	r26, r0
 a7c:	61 1d       	adc	r22, r1
 a7e:	23 1f       	adc	r18, r19
 a80:	84 9f       	mul	r24, r20
 a82:	60 0d       	add	r22, r0
 a84:	21 1d       	adc	r18, r1
 a86:	82 2f       	mov	r24, r18
 a88:	76 2f       	mov	r23, r22
 a8a:	6a 2f       	mov	r22, r26
 a8c:	11 24       	eor	r1, r1
 a8e:	9f 57       	subi	r25, 0x7F	; 127
 a90:	50 40       	sbci	r21, 0x00	; 0
 a92:	8a f0       	brmi	.+34     	; 0xab6 <__mulsf3_pse+0x84>
 a94:	e1 f0       	breq	.+56     	; 0xace <__mulsf3_pse+0x9c>
 a96:	88 23       	and	r24, r24
 a98:	4a f0       	brmi	.+18     	; 0xaac <__mulsf3_pse+0x7a>
 a9a:	ee 0f       	add	r30, r30
 a9c:	ff 1f       	adc	r31, r31
 a9e:	bb 1f       	adc	r27, r27
 aa0:	66 1f       	adc	r22, r22
 aa2:	77 1f       	adc	r23, r23
 aa4:	88 1f       	adc	r24, r24
 aa6:	91 50       	subi	r25, 0x01	; 1
 aa8:	50 40       	sbci	r21, 0x00	; 0
 aaa:	a9 f7       	brne	.-22     	; 0xa96 <__mulsf3_pse+0x64>
 aac:	9e 3f       	cpi	r25, 0xFE	; 254
 aae:	51 05       	cpc	r21, r1
 ab0:	70 f0       	brcs	.+28     	; 0xace <__mulsf3_pse+0x9c>
 ab2:	14 c0       	rjmp	.+40     	; 0xadc <__fp_inf>
 ab4:	aa cf       	rjmp	.-172    	; 0xa0a <__fp_szero>
 ab6:	5f 3f       	cpi	r21, 0xFF	; 255
 ab8:	ec f3       	brlt	.-6      	; 0xab4 <__mulsf3_pse+0x82>
 aba:	98 3e       	cpi	r25, 0xE8	; 232
 abc:	dc f3       	brlt	.-10     	; 0xab4 <__mulsf3_pse+0x82>
 abe:	86 95       	lsr	r24
 ac0:	77 95       	ror	r23
 ac2:	67 95       	ror	r22
 ac4:	b7 95       	ror	r27
 ac6:	f7 95       	ror	r31
 ac8:	e7 95       	ror	r30
 aca:	9f 5f       	subi	r25, 0xFF	; 255
 acc:	c1 f7       	brne	.-16     	; 0xabe <__mulsf3_pse+0x8c>
 ace:	fe 2b       	or	r31, r30
 ad0:	88 0f       	add	r24, r24
 ad2:	91 1d       	adc	r25, r1
 ad4:	96 95       	lsr	r25
 ad6:	87 95       	ror	r24
 ad8:	97 f9       	bld	r25, 7
 ada:	08 95       	ret

00000adc <__fp_inf>:
 adc:	97 f9       	bld	r25, 7
 ade:	9f 67       	ori	r25, 0x7F	; 127
 ae0:	80 e8       	ldi	r24, 0x80	; 128
 ae2:	70 e0       	ldi	r23, 0x00	; 0
 ae4:	60 e0       	ldi	r22, 0x00	; 0
 ae6:	08 95       	ret

00000ae8 <__fp_nan>:
 ae8:	9f ef       	ldi	r25, 0xFF	; 255
 aea:	80 ec       	ldi	r24, 0xC0	; 192
 aec:	08 95       	ret

00000aee <__fp_pscA>:
 aee:	00 24       	eor	r0, r0
 af0:	0a 94       	dec	r0
 af2:	16 16       	cp	r1, r22
 af4:	17 06       	cpc	r1, r23
 af6:	18 06       	cpc	r1, r24
 af8:	09 06       	cpc	r0, r25
 afa:	08 95       	ret

00000afc <__fp_pscB>:
 afc:	00 24       	eor	r0, r0
 afe:	0a 94       	dec	r0
 b00:	12 16       	cp	r1, r18
 b02:	13 06       	cpc	r1, r19
 b04:	14 06       	cpc	r1, r20
 b06:	05 06       	cpc	r0, r21
 b08:	08 95       	ret

00000b0a <__fp_round>:
 b0a:	09 2e       	mov	r0, r25
 b0c:	03 94       	inc	r0
 b0e:	00 0c       	add	r0, r0
 b10:	11 f4       	brne	.+4      	; 0xb16 <__fp_round+0xc>
 b12:	88 23       	and	r24, r24
 b14:	52 f0       	brmi	.+20     	; 0xb2a <__fp_round+0x20>
 b16:	bb 0f       	add	r27, r27
 b18:	40 f4       	brcc	.+16     	; 0xb2a <__fp_round+0x20>
 b1a:	bf 2b       	or	r27, r31
 b1c:	11 f4       	brne	.+4      	; 0xb22 <__fp_round+0x18>
 b1e:	60 ff       	sbrs	r22, 0
 b20:	04 c0       	rjmp	.+8      	; 0xb2a <__fp_round+0x20>
 b22:	6f 5f       	subi	r22, 0xFF	; 255
 b24:	7f 4f       	sbci	r23, 0xFF	; 255
 b26:	8f 4f       	sbci	r24, 0xFF	; 255
 b28:	9f 4f       	sbci	r25, 0xFF	; 255
 b2a:	08 95       	ret

00000b2c <__udivmodhi4>:
 b2c:	aa 1b       	sub	r26, r26
 b2e:	bb 1b       	sub	r27, r27
 b30:	51 e1       	ldi	r21, 0x11	; 17
 b32:	07 c0       	rjmp	.+14     	; 0xb42 <__udivmodhi4_ep>

00000b34 <__udivmodhi4_loop>:
 b34:	aa 1f       	adc	r26, r26
 b36:	bb 1f       	adc	r27, r27
 b38:	a6 17       	cp	r26, r22
 b3a:	b7 07       	cpc	r27, r23
 b3c:	10 f0       	brcs	.+4      	; 0xb42 <__udivmodhi4_ep>
 b3e:	a6 1b       	sub	r26, r22
 b40:	b7 0b       	sbc	r27, r23

00000b42 <__udivmodhi4_ep>:
 b42:	88 1f       	adc	r24, r24
 b44:	99 1f       	adc	r25, r25
 b46:	5a 95       	dec	r21
 b48:	a9 f7       	brne	.-22     	; 0xb34 <__udivmodhi4_loop>
 b4a:	80 95       	com	r24
 b4c:	90 95       	com	r25
 b4e:	bc 01       	movw	r22, r24
 b50:	cd 01       	movw	r24, r26
 b52:	08 95       	ret

00000b54 <__udivmodsi4>:
 b54:	a1 e2       	ldi	r26, 0x21	; 33
 b56:	1a 2e       	mov	r1, r26
 b58:	aa 1b       	sub	r26, r26
 b5a:	bb 1b       	sub	r27, r27
 b5c:	fd 01       	movw	r30, r26
 b5e:	0d c0       	rjmp	.+26     	; 0xb7a <__udivmodsi4_ep>

00000b60 <__udivmodsi4_loop>:
 b60:	aa 1f       	adc	r26, r26
 b62:	bb 1f       	adc	r27, r27
 b64:	ee 1f       	adc	r30, r30
 b66:	ff 1f       	adc	r31, r31
 b68:	a2 17       	cp	r26, r18
 b6a:	b3 07       	cpc	r27, r19
 b6c:	e4 07       	cpc	r30, r20
 b6e:	f5 07       	cpc	r31, r21
 b70:	20 f0       	brcs	.+8      	; 0xb7a <__udivmodsi4_ep>
 b72:	a2 1b       	sub	r26, r18
 b74:	b3 0b       	sbc	r27, r19
 b76:	e4 0b       	sbc	r30, r20
 b78:	f5 0b       	sbc	r31, r21

00000b7a <__udivmodsi4_ep>:
 b7a:	66 1f       	adc	r22, r22
 b7c:	77 1f       	adc	r23, r23
 b7e:	88 1f       	adc	r24, r24
 b80:	99 1f       	adc	r25, r25
 b82:	1a 94       	dec	r1
 b84:	69 f7       	brne	.-38     	; 0xb60 <__udivmodsi4_loop>
 b86:	60 95       	com	r22
 b88:	70 95       	com	r23
 b8a:	80 95       	com	r24
 b8c:	90 95       	com	r25
 b8e:	9b 01       	movw	r18, r22
 b90:	ac 01       	movw	r20, r24
 b92:	bd 01       	movw	r22, r26
 b94:	cf 01       	movw	r24, r30
 b96:	08 95       	ret

00000b98 <_exit>:
 b98:	f8 94       	cli

00000b9a <__stop_program>:
 b9a:	ff cf       	rjmp	.-2      	; 0xb9a <__stop_program>
