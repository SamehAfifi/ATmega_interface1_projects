
ADC_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000031c  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  000003b0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000b08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000844  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000327  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ec  00000000  00000000  00001753  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a4  00000000  00000000  00001f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e1  00000000  00000000  000020d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 8c 01 	jmp	0x318	; 0x318 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "ADC.h"
#include "lcd.h"

int main(void)
{
	ADC0_init();
  92:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC0_init>
	lcd_init();
  96:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_init>
    while(1)
    {
		lcd_write_number(ADC0_read());
  9a:	0e 94 66 00 	call	0xcc	; 0xcc <ADC0_read>
  9e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_write_number>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	99 e6       	ldi	r25, 0x69	; 105
  a6:	a8 e1       	ldi	r26, 0x18	; 24
  a8:	81 50       	subi	r24, 0x01	; 1
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	a0 40       	sbci	r26, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x20>
  b2:	00 00       	nop
		_delay_ms(1000);
		lcd_write_cmd(clear);
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_write_cmd>
		lcd_write_cmd(0xc0);
  ba:	80 ec       	ldi	r24, 0xC0	; 192
  bc:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_write_cmd>
  c0:	ec cf       	rjmp	.-40     	; 0x9a <main+0x8>

000000c2 <ADC0_init>:
 */

#include "ADC.h"

void ADC0_init(){
	ADMUX = 0x40;// 0x00
  c2:	80 e4       	ldi	r24, 0x40	; 64
  c4:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000111;
  c6:	87 e8       	ldi	r24, 0x87	; 135
  c8:	86 b9       	out	0x06, r24	; 6
}
  ca:	08 95       	ret

000000cc <ADC0_read>:

uint16_t ADC0_read(){
	ADCSRA |= 1<<6; //
  cc:	36 9a       	sbi	0x06, 6	; 6
	while(READBIT(ADCSRA,6));
  ce:	86 b1       	in	r24, 0x06	; 6
  d0:	86 fd       	sbrc	r24, 6
  d2:	fd cf       	rjmp	.-6      	; 0xce <ADC0_read+0x2>
	return (ADCL+ (ADCH << 8));
  d4:	24 b1       	in	r18, 0x04	; 4
  d6:	35 b1       	in	r19, 0x05	; 5
  d8:	93 2f       	mov	r25, r19
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	82 0f       	add	r24, r18
  de:	91 1d       	adc	r25, r1
}
  e0:	08 95       	ret

000000e2 <lcd_send_pulse_for_update_data_or_cmd>:
		txt[5] = '\0';
	}
}

static void lcd_send_pulse_for_update_data_or_cmd(){
	EN(1);
  e2:	c3 9a       	sbi	0x18, 3	; 24
  e4:	8f ec       	ldi	r24, 0xCF	; 207
  e6:	97 e0       	ldi	r25, 0x07	; 7
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_send_pulse_for_update_data_or_cmd+0x6>
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_send_pulse_for_update_data_or_cmd+0xc>
  ee:	00 00       	nop
	_delay_ms(1);
	EN(0);
  f0:	c3 98       	cbi	0x18, 3	; 24
  f2:	8f ec       	ldi	r24, 0xCF	; 207
  f4:	97 e0       	ldi	r25, 0x07	; 7
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_send_pulse_for_update_data_or_cmd+0x14>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <lcd_send_pulse_for_update_data_or_cmd+0x1a>
  fc:	00 00       	nop
	_delay_ms(1);
}
  fe:	08 95       	ret

00000100 <lcd_write>:
	lcd_write_cmd(0x06);  // increment cursor right
	lcd_write_cmd(0x80);  // set courser at the beginning of the first line
	_delay_ms(20);
}

void lcd_write(uint8_t cmd){
 100:	cf 93       	push	r28
 102:	c8 2f       	mov	r28, r24
	// read first 4 bit
	D7(READBIT(cmd,7)); 
 104:	88 23       	and	r24, r24
 106:	14 f0       	brlt	.+4      	; 0x10c <lcd_write+0xc>
 108:	df 98       	cbi	0x1b, 7	; 27
 10a:	01 c0       	rjmp	.+2      	; 0x10e <lcd_write+0xe>
 10c:	df 9a       	sbi	0x1b, 7	; 27
	D6(READBIT(cmd,6));
 10e:	8c 2f       	mov	r24, r28
 110:	82 95       	swap	r24
 112:	86 95       	lsr	r24
 114:	86 95       	lsr	r24
 116:	83 70       	andi	r24, 0x03	; 3
 118:	80 fd       	sbrc	r24, 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <lcd_write+0x20>
 11c:	de 98       	cbi	0x1b, 6	; 27
 11e:	01 c0       	rjmp	.+2      	; 0x122 <lcd_write+0x22>
 120:	de 9a       	sbi	0x1b, 6	; 27
	D5(READBIT(cmd,5));
 122:	8c 2f       	mov	r24, r28
 124:	82 95       	swap	r24
 126:	86 95       	lsr	r24
 128:	87 70       	andi	r24, 0x07	; 7
 12a:	80 fd       	sbrc	r24, 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <lcd_write+0x32>
 12e:	dd 98       	cbi	0x1b, 5	; 27
 130:	01 c0       	rjmp	.+2      	; 0x134 <lcd_write+0x34>
 132:	dd 9a       	sbi	0x1b, 5	; 27
	D4(READBIT(cmd,4));
 134:	8c 2f       	mov	r24, r28
 136:	82 95       	swap	r24
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	80 fd       	sbrc	r24, 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <lcd_write+0x42>
 13e:	dc 98       	cbi	0x1b, 4	; 27
 140:	01 c0       	rjmp	.+2      	; 0x144 <lcd_write+0x44>
 142:	dc 9a       	sbi	0x1b, 4	; 27

	lcd_send_pulse_for_update_data_or_cmd();
 144:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_send_pulse_for_update_data_or_cmd>

	// read second 4 bit
	D7(READBIT(cmd,3));
 148:	8c 2f       	mov	r24, r28
 14a:	86 95       	lsr	r24
 14c:	86 95       	lsr	r24
 14e:	86 95       	lsr	r24
 150:	80 fd       	sbrc	r24, 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <lcd_write+0x58>
 154:	df 98       	cbi	0x1b, 7	; 27
 156:	01 c0       	rjmp	.+2      	; 0x15a <lcd_write+0x5a>
 158:	df 9a       	sbi	0x1b, 7	; 27
	D6(READBIT(cmd,2));
 15a:	8c 2f       	mov	r24, r28
 15c:	86 95       	lsr	r24
 15e:	86 95       	lsr	r24
 160:	80 fd       	sbrc	r24, 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <lcd_write+0x68>
 164:	de 98       	cbi	0x1b, 6	; 27
 166:	01 c0       	rjmp	.+2      	; 0x16a <lcd_write+0x6a>
 168:	de 9a       	sbi	0x1b, 6	; 27
	D5(READBIT(cmd,1));
 16a:	8c 2f       	mov	r24, r28
 16c:	86 95       	lsr	r24
 16e:	80 fd       	sbrc	r24, 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <lcd_write+0x76>
 172:	dd 98       	cbi	0x1b, 5	; 27
 174:	01 c0       	rjmp	.+2      	; 0x178 <lcd_write+0x78>
 176:	dd 9a       	sbi	0x1b, 5	; 27
	D4(READBIT(cmd,0));
 178:	c0 fd       	sbrc	r28, 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <lcd_write+0x80>
 17c:	dc 98       	cbi	0x1b, 4	; 27
 17e:	01 c0       	rjmp	.+2      	; 0x182 <lcd_write+0x82>
 180:	dc 9a       	sbi	0x1b, 4	; 27

	lcd_send_pulse_for_update_data_or_cmd();
 182:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_send_pulse_for_update_data_or_cmd>
}
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <lcd_write_cmd>:


void lcd_write_cmd(uint8_t cmd){
	RS(0); // Rs = 0
 18a:	c1 98       	cbi	0x18, 1	; 24
	lcd_write(cmd);
 18c:	0e 94 80 00 	call	0x100	; 0x100 <lcd_write>
}
 190:	08 95       	ret

00000192 <lcd_init>:

#include "lcd.h"
uint8_t txt[5];

void lcd_init(){
	INIT_PORT;
 192:	8a b3       	in	r24, 0x1a	; 26
 194:	80 6f       	ori	r24, 0xF0	; 240
 196:	8a bb       	out	0x1a, r24	; 26
 198:	87 b3       	in	r24, 0x17	; 23
 19a:	8e 60       	ori	r24, 0x0E	; 14
 19c:	87 bb       	out	0x17, r24	; 23
 19e:	80 e2       	ldi	r24, 0x20	; 32
 1a0:	84 bb       	out	0x14, r24	; 20
	Rw(0);
 1a2:	c2 98       	cbi	0x18, 2	; 24
	lcd_write_cmd(0x2);
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_write_cmd>
	lcd_write_cmd(0x28);  // 4data line
 1aa:	88 e2       	ldi	r24, 0x28	; 40
 1ac:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_write_cmd>
	lcd_write_cmd(0x01);
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_write_cmd>
	lcd_write_cmd(0x0c);  // display on cursor off
 1b6:	8c e0       	ldi	r24, 0x0C	; 12
 1b8:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_write_cmd>
	lcd_write_cmd(0x06);  // increment cursor right
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_write_cmd>
	lcd_write_cmd(0x80);  // set courser at the beginning of the first line
 1c2:	80 e8       	ldi	r24, 0x80	; 128
 1c4:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_write_cmd>
 1c8:	8f e3       	ldi	r24, 0x3F	; 63
 1ca:	9c e9       	ldi	r25, 0x9C	; 156
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x3a>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x40>
 1d2:	00 00       	nop
	_delay_ms(20);
}
 1d4:	08 95       	ret

000001d6 <lcd_write_char>:
	RS(0); // Rs = 0
	lcd_write(cmd);
}

void lcd_write_char(uint8_t cmd){
	RS(1); // Rs = 1
 1d6:	c1 9a       	sbi	0x18, 1	; 24
	lcd_write(cmd);
 1d8:	0e 94 80 00 	call	0x100	; 0x100 <lcd_write>
}
 1dc:	08 95       	ret

000001de <lcd_write_txt>:


void lcd_write_txt(uint8_t *x){
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	ec 01       	movw	r28, r24
	for(int i = 0; x[i] != '\0'; i++)
 1e4:	88 81       	ld	r24, Y
 1e6:	88 23       	and	r24, r24
 1e8:	31 f0       	breq	.+12     	; 0x1f6 <lcd_write_txt+0x18>
	RS(1); // Rs = 1
	lcd_write(cmd);
}


void lcd_write_txt(uint8_t *x){
 1ea:	21 96       	adiw	r28, 0x01	; 1
	for(int i = 0; x[i] != '\0'; i++)
		lcd_write_char(x[i]);
 1ec:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_write_char>
	lcd_write(cmd);
}


void lcd_write_txt(uint8_t *x){
	for(int i = 0; x[i] != '\0'; i++)
 1f0:	89 91       	ld	r24, Y+
 1f2:	88 23       	and	r24, r24
 1f4:	d9 f7       	brne	.-10     	; 0x1ec <lcd_write_txt+0xe>
		lcd_write_char(x[i]);
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <lcd_write_number>:
	lcd_write_txt(txt);
}

static void IntToString(uint16_t number, uint8_t *txt){
	
	if(number < 10){
 1fc:	8a 30       	cpi	r24, 0x0A	; 10
 1fe:	91 05       	cpc	r25, r1
 200:	50 f4       	brcc	.+20     	; 0x216 <lcd_write_number+0x1a>
		txt[0] = number % 10 + 48;
 202:	6a e0       	ldi	r22, 0x0A	; 10
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__udivmodhi4>
 20a:	80 5d       	subi	r24, 0xD0	; 208
 20c:	80 93 60 00 	sts	0x0060, r24
		txt[1] = '\0';
 210:	10 92 61 00 	sts	0x0061, r1
 214:	68 c0       	rjmp	.+208    	; 0x2e6 <lcd_write_number+0xea>
	}
	else if(number < 100){
 216:	84 36       	cpi	r24, 0x64	; 100
 218:	91 05       	cpc	r25, r1
 21a:	68 f4       	brcc	.+26     	; 0x236 <lcd_write_number+0x3a>
		txt[0] = number / 10 + 48;
 21c:	6a e0       	ldi	r22, 0x0A	; 10
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__udivmodhi4>
 224:	60 5d       	subi	r22, 0xD0	; 208
 226:	60 93 60 00 	sts	0x0060, r22
		txt[1] = number % 10 + 48;
 22a:	80 5d       	subi	r24, 0xD0	; 208
 22c:	80 93 61 00 	sts	0x0061, r24
		txt[2] = '\0';
 230:	10 92 62 00 	sts	0x0062, r1
 234:	58 c0       	rjmp	.+176    	; 0x2e6 <lcd_write_number+0xea>
	}
	else if(number < 1000){
 236:	23 e0       	ldi	r18, 0x03	; 3
 238:	88 3e       	cpi	r24, 0xE8	; 232
 23a:	92 07       	cpc	r25, r18
 23c:	a0 f4       	brcc	.+40     	; 0x266 <lcd_write_number+0x6a>
		txt[0] = number / 100 + 48;
 23e:	64 e6       	ldi	r22, 0x64	; 100
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__udivmodhi4>
 246:	60 5d       	subi	r22, 0xD0	; 208
 248:	60 93 60 00 	sts	0x0060, r22
		number = number % 100 ;
		txt[1] = number / 10 + 48;
 24c:	6a e0       	ldi	r22, 0x0A	; 10
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__udivmodhi4>
 254:	60 5d       	subi	r22, 0xD0	; 208
 256:	60 93 61 00 	sts	0x0061, r22
		txt[2] = number % 10 + 48;
 25a:	80 5d       	subi	r24, 0xD0	; 208
 25c:	80 93 62 00 	sts	0x0062, r24
		txt[3] = '\0';
 260:	10 92 63 00 	sts	0x0063, r1
 264:	40 c0       	rjmp	.+128    	; 0x2e6 <lcd_write_number+0xea>
	}
	else  if(number < 10000){
 266:	27 e2       	ldi	r18, 0x27	; 39
 268:	80 31       	cpi	r24, 0x10	; 16
 26a:	92 07       	cpc	r25, r18
 26c:	d8 f4       	brcc	.+54     	; 0x2a4 <lcd_write_number+0xa8>
		txt[0] = number / 1000 + 48;
 26e:	68 ee       	ldi	r22, 0xE8	; 232
 270:	73 e0       	ldi	r23, 0x03	; 3
 272:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__udivmodhi4>
 276:	60 5d       	subi	r22, 0xD0	; 208
 278:	60 93 60 00 	sts	0x0060, r22
		number = number % 1000 ;
		txt[1] = number / 100 + 48;
 27c:	64 e6       	ldi	r22, 0x64	; 100
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__udivmodhi4>
 284:	60 5d       	subi	r22, 0xD0	; 208
 286:	60 93 61 00 	sts	0x0061, r22
		number = number % 100 ;
		txt[2] = number / 10 + 48;
 28a:	6a e0       	ldi	r22, 0x0A	; 10
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__udivmodhi4>
 292:	60 5d       	subi	r22, 0xD0	; 208
 294:	60 93 62 00 	sts	0x0062, r22
		txt[3] = number % 10 + 48;
 298:	80 5d       	subi	r24, 0xD0	; 208
 29a:	80 93 63 00 	sts	0x0063, r24
		txt[4] = '\0';
 29e:	10 92 64 00 	sts	0x0064, r1
 2a2:	21 c0       	rjmp	.+66     	; 0x2e6 <lcd_write_number+0xea>
	}
	else  if(number < 100000){
		txt[0] = number / 10000 + 48;
 2a4:	60 e1       	ldi	r22, 0x10	; 16
 2a6:	77 e2       	ldi	r23, 0x27	; 39
 2a8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__udivmodhi4>
 2ac:	60 5d       	subi	r22, 0xD0	; 208
 2ae:	60 93 60 00 	sts	0x0060, r22
		number = number % 10000 ;
		txt[1] = number / 1000 + 48;
 2b2:	68 ee       	ldi	r22, 0xE8	; 232
 2b4:	73 e0       	ldi	r23, 0x03	; 3
 2b6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__udivmodhi4>
 2ba:	60 5d       	subi	r22, 0xD0	; 208
 2bc:	60 93 61 00 	sts	0x0061, r22
		number = number % 1000 ;
		txt[2] = number / 100 + 48;
 2c0:	64 e6       	ldi	r22, 0x64	; 100
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__udivmodhi4>
 2c8:	60 5d       	subi	r22, 0xD0	; 208
 2ca:	60 93 62 00 	sts	0x0062, r22
		number = number % 100 ;
		txt[3] = number / 10 + 48;
 2ce:	6a e0       	ldi	r22, 0x0A	; 10
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__udivmodhi4>
 2d6:	60 5d       	subi	r22, 0xD0	; 208
 2d8:	60 93 63 00 	sts	0x0063, r22
		txt[4] = number % 10 + 48;
 2dc:	80 5d       	subi	r24, 0xD0	; 208
 2de:	80 93 64 00 	sts	0x0064, r24
		txt[5] = '\0';
 2e2:	10 92 65 00 	sts	0x0065, r1
		lcd_write_char(x[i]);
}

void lcd_write_number(uint16_t data){
	IntToString(data,txt);
	lcd_write_txt(txt);
 2e6:	80 e6       	ldi	r24, 0x60	; 96
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_write_txt>
}
 2ee:	08 95       	ret

000002f0 <__udivmodhi4>:
 2f0:	aa 1b       	sub	r26, r26
 2f2:	bb 1b       	sub	r27, r27
 2f4:	51 e1       	ldi	r21, 0x11	; 17
 2f6:	07 c0       	rjmp	.+14     	; 0x306 <__udivmodhi4_ep>

000002f8 <__udivmodhi4_loop>:
 2f8:	aa 1f       	adc	r26, r26
 2fa:	bb 1f       	adc	r27, r27
 2fc:	a6 17       	cp	r26, r22
 2fe:	b7 07       	cpc	r27, r23
 300:	10 f0       	brcs	.+4      	; 0x306 <__udivmodhi4_ep>
 302:	a6 1b       	sub	r26, r22
 304:	b7 0b       	sbc	r27, r23

00000306 <__udivmodhi4_ep>:
 306:	88 1f       	adc	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	5a 95       	dec	r21
 30c:	a9 f7       	brne	.-22     	; 0x2f8 <__udivmodhi4_loop>
 30e:	80 95       	com	r24
 310:	90 95       	com	r25
 312:	bc 01       	movw	r22, r24
 314:	cd 01       	movw	r24, r26
 316:	08 95       	ret

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
